
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR COMMA DIVIDE DO ELSE EQ FOR GE GT IDENTIFIER IF INT LBRACE LE LPAREN LT MINUS NOT_EQ NUMBER PLUS PLUSASSIGN RBRACE RPAREN SEMICOLON TIMES WHILEstart : compound_statement\n             | declarationstatement_type : type_specifier statement_type\n                      | type_specifiertype_specifier : CHAR\n                      | INTinit_declarator_compound : init_declarator\n                                | init_declarator_compound COMMA init_declaratorinit_declarator : simple_declarator\n                       | simple_declarator ASSIGN initializermulti_specifier : type_specifier multi_specifier\n                       | type_specifierdeclaration : statement_type init_declarator_compound SEMICOLON\n                   | statement_type SEMICOLONdeclaration_compound : declaration\n                            | declaration_compound declarationsimple_declarator : IDENTIFIER\n                         | LPAREN simple_declarator RPAREN\n                         | simple_declarator LPAREN parameter_list RPAREN\n                         | simple_declarator LPAREN identifier_list RPARENparameter_list : parameter_declaration\n                      | parameter_list COMMA parameter_declarationparameter_declaration : statement_type simple_declarator\n                             | statement_type declarator_typeidentifier_list : IDENTIFIER\n                       | identifier_list COMMA IDENTIFIERinitializer : assignment_expression\n                   | LBRACE initializer_list RBRACE\n                   | LBRACE initializer_list COMMA RBRACEinitializer_list : initializer\n                        | initializer_list COMMA initializertype_name : multi_specifier declarator_typedeclarator_type : empty\n                       | direct_single_declaratordirect_single_declarator : LPAREN direct_single_declarator RPAREN\n                                | direct_single_declarator LPAREN parameter_type_list RPAREN\n                                | LPAREN parameter_type_list RPARENstatement : expression_statement\n                 | compound_statement\n                 | if_statement\n                 | iteration_statementexpression_statement : expression_type SEMICOLONcompound_statement : LBRACE declaration_compound statement_list RBRACE\n                          | LBRACE statement_list RBRACE\n                          | LBRACE declaration_compound RBRACE\n                          | LBRACE RBRACEstatement_list : statement\n                      | statement_list statementparameter_type_list : empty\n                           | parameter_listif_statement : IF LPAREN expression RPAREN statement\n                    | IF LPAREN expression RPAREN statement ELSE statementiteration_statement : WHILE LPAREN expression RPAREN statement\n                           | FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement\n                           | DO statement WHILE LPAREN expression RPAREN SEMICOLONexpression_type : empty\n                       | expressionexpression : assignment_expression\n                  | expression COMMA assignment_expressionassignment_expression : equality_expression\n                             | unary_expression assignment_operator assignment_expressionassignment_operator : ASSIGN\n                           | PLUSASSIGNequality_expression : relational_expression\n                           | equality_expression EQ relational_expression\n                           | equality_expression NOT_EQ relational_expressionrelational_expression : next_expression\n                             | relational_expression LT next_expression\n                             | relational_expression GT next_expression\n                             | relational_expression LE next_expression\n                             | relational_expression GE next_expressionmultiplicative_expression : cast_expression\n                                 | multiplicative_expression TIMES cast_expression\n                                 | multiplicative_expression DIVIDE cast_expressioncast_expression : unary_expression\n                       | LPAREN type_name RPAREN cast_expressionnext_expression : multiplicative_expression\n                       | next_expression PLUS multiplicative_expression\n                       | next_expression MINUS multiplicative_expressionunary_expression : higher_expression\n                        | unary_operator cast_expressionunary_operator : TIMES\n                      | PLUS\n                      | MINUShigher_expression : primary_expression\n                         | higher_expression LPAREN argument_expression_list RPAREN\n                         | higher_expression LPAREN RPARENprimary_expression :  IDENTIFIER\n                          |  constant\n                          |  LPAREN expression RPARENargument_expression_list :  assignment_expression\n                                |  argument_expression_list COMMA assignment_expressionconstant : NUMBERempty : '
    
_lr_action_items = {'LBRACE':([0,4,9,10,11,12,13,14,15,16,17,24,43,49,50,51,52,53,54,81,83,86,116,123,130,144,148,153,156,162,164,165,166,],[4,4,4,4,-46,-15,-47,-38,-39,-40,-41,4,-14,4,-45,-16,-44,-48,-42,-13,116,-43,116,4,4,-51,-53,116,4,-52,-55,4,-54,]),'CHAR':([0,4,6,7,8,9,12,20,43,51,59,76,81,84,93,125,138,143,],[7,7,7,-5,-6,7,-15,7,-14,-16,7,7,-13,7,7,7,7,7,]),'INT':([0,4,6,7,8,9,12,20,43,51,59,76,81,84,93,125,138,143,],[8,8,8,-5,-6,8,-15,8,-14,-16,8,8,-13,8,8,8,8,8,]),'$end':([1,2,3,11,43,50,52,81,86,],[0,-1,-2,-46,-14,-45,-44,-13,-43,]),'RBRACE':([4,9,10,11,12,13,14,15,16,17,27,28,29,30,32,33,34,38,39,40,41,43,49,50,51,52,53,54,74,75,81,86,88,99,100,101,102,103,104,105,107,109,110,111,112,115,124,133,135,136,144,148,152,153,160,161,162,164,166,],[11,50,52,-46,-15,-47,-38,-39,-40,-41,-60,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,-14,86,-45,-16,-44,-48,-42,-81,-75,-13,-43,-90,-65,-66,-61,-68,-69,-70,-71,-87,-78,-79,-73,-74,-27,-76,-86,152,-30,-51,-53,-28,160,-29,-31,-52,-55,-54,]),'IF':([4,9,10,11,12,13,14,15,16,17,24,43,49,50,51,52,53,54,81,86,123,130,144,148,156,162,164,165,166,],[19,19,19,-46,-15,-47,-38,-39,-40,-41,19,-14,19,-45,-16,-44,-48,-42,-13,-43,19,19,-51,-53,19,-52,-55,19,-54,]),'WHILE':([4,9,10,11,12,13,14,15,16,17,24,43,49,50,51,52,53,54,63,81,86,123,130,144,148,156,162,164,165,166,],[22,22,22,-46,-15,-47,-38,-39,-40,-41,22,-14,22,-45,-16,-44,-48,-42,98,-13,-43,22,22,-51,-53,22,-52,-55,22,-54,]),'FOR':([4,9,10,11,12,13,14,15,16,17,24,43,49,50,51,52,53,54,81,86,123,130,144,148,156,162,164,165,166,],[23,23,23,-46,-15,-47,-38,-39,-40,-41,23,-14,23,-45,-16,-44,-48,-42,-13,-43,23,23,-51,-53,23,-52,-55,23,-54,]),'DO':([4,9,10,11,12,13,14,15,16,17,24,43,49,50,51,52,53,54,81,86,123,130,144,148,156,162,164,165,166,],[24,24,24,-46,-15,-47,-38,-39,-40,-41,24,-14,24,-45,-16,-44,-48,-42,-13,-43,24,24,-51,-53,24,-52,-55,24,-54,]),'SEMICOLON':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,21,24,25,26,27,28,29,30,32,33,34,38,39,40,41,42,43,44,45,46,48,49,50,51,52,53,54,62,74,75,81,86,88,95,97,99,100,101,102,103,104,105,107,109,110,111,112,113,114,115,122,123,124,130,131,133,137,139,144,148,149,152,156,159,160,162,164,165,166,],[-94,43,-4,-5,-6,-94,-94,-46,-15,-47,-38,-39,-40,-41,54,-57,-94,-56,-58,-60,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,81,-14,-7,-9,-17,-3,-94,-45,-16,-44,-48,-42,-94,-81,-75,-13,-43,-90,-59,131,-65,-66,-61,-68,-69,-70,-71,-87,-78,-79,-73,-74,-8,-10,-27,-18,-94,-76,-94,-94,-86,-19,-20,-51,-53,158,-28,-94,164,-29,-52,-55,-94,-54,]),'TIMES':([4,9,10,11,12,13,14,15,16,17,20,24,28,30,31,32,34,35,36,37,38,39,40,41,43,49,50,51,52,53,54,55,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,88,89,107,109,110,111,112,116,123,124,130,131,132,133,134,144,148,153,156,158,162,164,165,166,],[35,35,35,-46,-15,-47,-38,-39,-40,-41,35,35,-75,-80,35,-72,-85,-82,-83,-84,79,-88,-89,-93,-14,35,-45,-16,-44,-48,-42,35,35,35,35,35,35,35,-62,-63,35,35,35,35,35,-81,-75,35,35,35,35,35,-13,35,-43,-90,35,-87,79,79,-73,-74,35,35,-76,35,35,35,-86,35,-51,-53,35,35,35,-52,-55,35,-54,]),'PLUS':([4,9,10,11,12,13,14,15,16,17,20,24,28,30,31,32,33,34,35,36,37,38,39,40,41,43,49,50,51,52,53,54,55,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,88,89,102,103,104,105,107,109,110,111,112,116,123,124,130,131,132,133,134,144,148,153,156,158,162,164,165,166,],[36,36,36,-46,-15,-47,-38,-39,-40,-41,36,36,-75,-80,36,-72,77,-85,-82,-83,-84,-77,-88,-89,-93,-14,36,-45,-16,-44,-48,-42,36,36,36,36,36,36,36,-62,-63,36,36,36,36,36,-81,-75,36,36,36,36,36,-13,36,-43,-90,36,77,77,77,77,-87,-78,-79,-73,-74,36,36,-76,36,36,36,-86,36,-51,-53,36,36,36,-52,-55,36,-54,]),'MINUS':([4,9,10,11,12,13,14,15,16,17,20,24,28,30,31,32,33,34,35,36,37,38,39,40,41,43,49,50,51,52,53,54,55,60,61,62,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,83,86,88,89,102,103,104,105,107,109,110,111,112,116,123,124,130,131,132,133,134,144,148,153,156,158,162,164,165,166,],[37,37,37,-46,-15,-47,-38,-39,-40,-41,37,37,-75,-80,37,-72,78,-85,-82,-83,-84,-77,-88,-89,-93,-14,37,-45,-16,-44,-48,-42,37,37,37,37,37,37,37,-62,-63,37,37,37,37,37,-81,-75,37,37,37,37,37,-13,37,-43,-90,37,78,78,78,78,-87,-78,-79,-73,-74,37,37,-76,37,37,37,-86,37,-51,-53,37,37,37,-52,-55,37,-54,]),'IDENTIFIER':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,20,24,31,35,36,37,43,47,48,49,50,51,52,53,54,55,60,61,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,82,83,84,86,89,116,121,123,130,131,132,134,140,143,144,148,153,156,158,162,164,165,166,],[39,46,-4,-5,-6,39,39,-46,-15,-47,-38,-39,-40,-41,39,39,39,-82,-83,-84,-14,46,-3,39,-45,-16,-44,-48,-42,39,39,39,39,39,39,39,-62,-63,39,39,39,39,39,39,39,39,39,39,-13,46,39,120,-43,39,39,46,39,39,39,39,39,155,46,-51,-53,39,39,39,-52,-55,39,-54,]),'LPAREN':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,19,20,22,23,24,30,31,34,35,36,37,39,40,41,43,45,46,47,48,49,50,51,52,53,54,55,58,59,60,61,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,82,83,85,86,88,89,92,93,94,98,107,116,121,122,123,126,130,131,132,133,134,137,139,141,143,144,146,147,148,153,156,157,158,162,164,165,166,],[20,47,-4,-5,-6,20,20,-46,-15,-47,-38,-39,-40,-41,55,20,61,62,20,73,76,-85,-82,-83,-84,-88,-89,-93,-14,84,-17,47,-3,20,-45,-16,-44,-48,-42,20,93,-12,20,20,20,76,76,20,-62,-63,76,76,76,76,20,20,76,76,76,76,-13,47,20,84,-43,-90,76,125,93,-11,132,-87,20,143,-18,20,125,20,20,20,-86,20,-19,-20,84,143,-51,-35,-37,-53,20,20,-36,20,-52,-55,20,-54,]),'NUMBER':([4,9,10,11,12,13,14,15,16,17,20,24,31,35,36,37,43,49,50,51,52,53,54,55,60,61,62,64,65,66,67,68,69,70,71,72,73,76,77,78,79,80,81,83,86,89,116,123,130,131,132,134,144,148,153,156,158,162,164,165,166,],[41,41,41,-46,-15,-47,-38,-39,-40,-41,41,41,41,-82,-83,-84,-14,41,-45,-16,-44,-48,-42,41,41,41,41,41,41,41,-62,-63,41,41,41,41,41,41,41,41,41,41,-13,41,-43,41,41,41,41,41,41,41,-51,-53,41,41,41,-52,-55,41,-54,]),'RPAREN':([6,7,8,21,25,26,27,28,29,30,32,33,34,38,39,40,41,46,48,56,57,58,59,73,74,75,85,87,88,90,91,92,93,94,95,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,117,118,119,120,121,122,124,125,126,127,128,129,133,137,139,141,142,143,145,146,147,150,151,154,155,157,158,163,],[-4,-5,-6,-57,-56,-58,-60,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,-17,-3,88,89,-94,-12,107,-81,-75,122,123,-90,-32,-33,-34,-94,-11,-59,130,-65,-66,-61,-68,-69,-70,-71,133,-87,-91,-78,-79,-73,-74,137,139,-21,-25,-94,-18,-76,-94,146,147,-49,-50,-86,-19,-20,-23,-24,-94,157,-35,-37,159,-92,-22,-26,-36,-94,165,]),'COMMA':([6,7,8,21,26,27,28,29,30,32,33,34,38,39,40,41,42,44,45,46,48,56,74,75,87,88,91,92,95,96,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,117,118,119,120,121,122,124,129,133,135,136,137,139,141,142,146,147,150,151,152,154,155,157,160,161,],[-4,-5,-6,60,-58,-60,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,82,-7,-9,-17,-3,60,-81,-75,60,-90,-33,-34,-59,60,-65,-66,-61,-68,-69,-70,-71,134,-87,-91,-78,-79,-73,-74,-8,-10,-27,138,140,-21,-25,-94,-18,-76,138,-86,153,-30,-19,-20,-23,-24,-35,-37,60,-92,-28,-22,-26,-36,-29,-31,]),'ELSE':([11,14,15,16,17,50,52,54,86,144,148,162,164,166,],[-46,-38,-39,-40,-41,-45,-44,-42,-43,156,-53,-52,-55,-54,]),'EQ':([27,28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[64,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,-65,-66,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'NOT_EQ':([27,28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[65,-75,-64,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,-65,-66,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'DIVIDE':([28,30,32,34,38,39,40,41,74,75,88,107,109,110,111,112,124,133,],[-75,-80,-72,-85,80,-88,-89,-93,-81,-75,-90,-87,80,80,-73,-74,-76,-86,]),'LT':([28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[-75,69,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,69,69,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'GT':([28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[-75,70,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,70,70,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'LE':([28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[-75,71,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,71,71,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'GE':([28,29,30,32,33,34,38,39,40,41,74,75,88,99,100,102,103,104,105,107,109,110,111,112,124,133,],[-75,72,-80,-72,-67,-85,-77,-88,-89,-93,-81,-75,-90,72,72,-68,-69,-70,-71,-87,-78,-79,-73,-74,-76,-86,]),'ASSIGN':([28,30,34,39,40,41,45,46,74,75,88,107,122,124,133,137,139,],[67,-80,-85,-88,-89,-93,83,-17,-81,-75,-90,-87,-18,-76,-86,-19,-20,]),'PLUSASSIGN':([28,30,34,39,40,41,74,75,88,107,124,133,],[68,-80,-85,-88,-89,-93,-81,-75,-90,-87,-76,-86,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'compound_statement':([0,4,9,10,24,49,123,130,156,165,],[2,15,15,15,15,15,15,15,15,15,]),'declaration':([0,4,9,],[3,12,51,]),'statement_type':([0,4,6,9,84,93,125,138,143,],[5,5,48,5,121,121,121,121,121,]),'type_specifier':([0,4,6,9,20,59,76,84,93,125,138,143,],[6,6,6,6,59,59,59,6,6,6,6,6,]),'declaration_compound':([4,],[9,]),'statement_list':([4,9,],[10,49,]),'statement':([4,9,10,24,49,123,130,156,165,],[13,13,53,63,53,144,148,162,166,]),'expression_statement':([4,9,10,24,49,123,130,156,165,],[14,14,14,14,14,14,14,14,14,]),'if_statement':([4,9,10,24,49,123,130,156,165,],[16,16,16,16,16,16,16,16,16,]),'iteration_statement':([4,9,10,24,49,123,130,156,165,],[17,17,17,17,17,17,17,17,17,]),'expression_type':([4,9,10,24,49,62,123,130,131,156,158,165,],[18,18,18,18,18,97,18,18,149,18,163,18,]),'expression':([4,9,10,20,24,49,55,61,62,76,123,130,131,132,156,158,165,],[21,21,21,56,21,21,87,96,21,56,21,21,21,150,21,21,21,]),'empty':([4,9,10,24,49,58,62,93,121,123,125,130,131,143,156,158,165,],[25,25,25,25,25,91,25,128,91,25,128,25,25,128,25,25,25,]),'assignment_expression':([4,9,10,20,24,49,55,60,61,62,66,73,76,83,116,123,130,131,132,134,153,156,158,165,],[26,26,26,26,26,26,26,95,26,26,101,108,26,115,115,26,26,26,26,151,115,26,26,26,]),'equality_expression':([4,9,10,20,24,49,55,60,61,62,66,73,76,83,116,123,130,131,132,134,153,156,158,165,],[27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'unary_expression':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[28,28,28,28,28,75,28,28,28,28,28,75,75,28,75,75,75,75,28,28,75,75,75,75,28,75,28,28,28,28,28,28,28,28,28,28,]),'relational_expression':([4,9,10,20,24,49,55,60,61,62,64,65,66,73,76,83,116,123,130,131,132,134,153,156,158,165,],[29,29,29,29,29,29,29,29,29,29,99,100,29,29,29,29,29,29,29,29,29,29,29,29,29,29,]),'higher_expression':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,]),'unary_operator':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'cast_expression':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[32,32,32,32,32,74,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,111,112,32,124,32,32,32,32,32,32,32,32,32,32,]),'next_expression':([4,9,10,20,24,49,55,60,61,62,64,65,66,69,70,71,72,73,76,83,116,123,130,131,132,134,153,156,158,165,],[33,33,33,33,33,33,33,33,33,33,33,33,33,102,103,104,105,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'primary_expression':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'multiplicative_expression':([4,9,10,20,24,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,83,116,123,130,131,132,134,153,156,158,165,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,109,110,38,38,38,38,38,38,38,38,38,38,38,]),'constant':([4,9,10,20,24,31,49,55,60,61,62,64,65,66,69,70,71,72,73,76,77,78,79,80,83,89,116,123,130,131,132,134,153,156,158,165,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'init_declarator_compound':([5,],[42,]),'init_declarator':([5,82,],[44,113,]),'simple_declarator':([5,47,82,121,143,],[45,85,45,141,85,]),'type_name':([20,76,],[57,57,]),'multi_specifier':([20,59,76,],[58,94,58,]),'assignment_operator':([28,],[66,]),'declarator_type':([58,121,],[90,142,]),'direct_single_declarator':([58,93,121,143,],[92,126,92,126,]),'argument_expression_list':([73,],[106,]),'initializer':([83,116,153,],[114,136,161,]),'parameter_list':([84,93,125,143,],[117,129,129,129,]),'identifier_list':([84,],[118,]),'parameter_declaration':([84,93,125,138,143,],[119,119,119,154,119,]),'parameter_type_list':([93,125,143,],[127,145,127,]),'initializer_list':([116,],[135,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> compound_statement','start',1,'p_start','Parsing.py',11),
  ('start -> declaration','start',1,'p_start','Parsing.py',12),
  ('statement_type -> type_specifier statement_type','statement_type',2,'p_statement_type','Parsing.py',17),
  ('statement_type -> type_specifier','statement_type',1,'p_statement_type','Parsing.py',18),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','Parsing.py',23),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','Parsing.py',24),
  ('init_declarator_compound -> init_declarator','init_declarator_compound',1,'p_init_declarator_compound','Parsing.py',29),
  ('init_declarator_compound -> init_declarator_compound COMMA init_declarator','init_declarator_compound',3,'p_init_declarator_compound','Parsing.py',30),
  ('init_declarator -> simple_declarator','init_declarator',1,'p_init_declarator','Parsing.py',35),
  ('init_declarator -> simple_declarator ASSIGN initializer','init_declarator',3,'p_init_declarator','Parsing.py',36),
  ('multi_specifier -> type_specifier multi_specifier','multi_specifier',2,'p_multi_specifier','Parsing.py',41),
  ('multi_specifier -> type_specifier','multi_specifier',1,'p_multi_specifier','Parsing.py',42),
  ('declaration -> statement_type init_declarator_compound SEMICOLON','declaration',3,'p_declaration','Parsing.py',47),
  ('declaration -> statement_type SEMICOLON','declaration',2,'p_declaration','Parsing.py',48),
  ('declaration_compound -> declaration','declaration_compound',1,'p_declaration_compound','Parsing.py',53),
  ('declaration_compound -> declaration_compound declaration','declaration_compound',2,'p_declaration_compound','Parsing.py',54),
  ('simple_declarator -> IDENTIFIER','simple_declarator',1,'p_simple_declarator','Parsing.py',59),
  ('simple_declarator -> LPAREN simple_declarator RPAREN','simple_declarator',3,'p_simple_declarator','Parsing.py',60),
  ('simple_declarator -> simple_declarator LPAREN parameter_list RPAREN','simple_declarator',4,'p_simple_declarator','Parsing.py',61),
  ('simple_declarator -> simple_declarator LPAREN identifier_list RPAREN','simple_declarator',4,'p_simple_declarator','Parsing.py',62),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','Parsing.py',67),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','Parsing.py',68),
  ('parameter_declaration -> statement_type simple_declarator','parameter_declaration',2,'p_parameter_declaration','Parsing.py',73),
  ('parameter_declaration -> statement_type declarator_type','parameter_declaration',2,'p_parameter_declaration','Parsing.py',74),
  ('identifier_list -> IDENTIFIER','identifier_list',1,'p_identifier_list','Parsing.py',79),
  ('identifier_list -> identifier_list COMMA IDENTIFIER','identifier_list',3,'p_identifier_list','Parsing.py',80),
  ('initializer -> assignment_expression','initializer',1,'p_initializer_1','Parsing.py',85),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer_1','Parsing.py',86),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer_1','Parsing.py',87),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','Parsing.py',92),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','Parsing.py',93),
  ('type_name -> multi_specifier declarator_type','type_name',2,'p_type_name','Parsing.py',98),
  ('declarator_type -> empty','declarator_type',1,'p_declarator_type','Parsing.py',103),
  ('declarator_type -> direct_single_declarator','declarator_type',1,'p_declarator_type','Parsing.py',104),
  ('direct_single_declarator -> LPAREN direct_single_declarator RPAREN','direct_single_declarator',3,'p_direct_single_declarator','Parsing.py',109),
  ('direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN','direct_single_declarator',4,'p_direct_single_declarator','Parsing.py',110),
  ('direct_single_declarator -> LPAREN parameter_type_list RPAREN','direct_single_declarator',3,'p_direct_single_declarator','Parsing.py',111),
  ('statement -> expression_statement','statement',1,'p_statement','Parsing.py',116),
  ('statement -> compound_statement','statement',1,'p_statement','Parsing.py',117),
  ('statement -> if_statement','statement',1,'p_statement','Parsing.py',118),
  ('statement -> iteration_statement','statement',1,'p_statement','Parsing.py',119),
  ('expression_statement -> expression_type SEMICOLON','expression_statement',2,'p_expression_statement','Parsing.py',124),
  ('compound_statement -> LBRACE declaration_compound statement_list RBRACE','compound_statement',4,'p_compound_statement','Parsing.py',129),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','Parsing.py',130),
  ('compound_statement -> LBRACE declaration_compound RBRACE','compound_statement',3,'p_compound_statement','Parsing.py',131),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','Parsing.py',132),
  ('statement_list -> statement','statement_list',1,'p_statement_list','Parsing.py',137),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','Parsing.py',138),
  ('parameter_type_list -> empty','parameter_type_list',1,'p_parameter_type_list','Parsing.py',143),
  ('parameter_type_list -> parameter_list','parameter_type_list',1,'p_parameter_type_list','Parsing.py',144),
  ('if_statement -> IF LPAREN expression RPAREN statement','if_statement',5,'p_if_statement','Parsing.py',149),
  ('if_statement -> IF LPAREN expression RPAREN statement ELSE statement','if_statement',7,'p_if_statement','Parsing.py',150),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','Parsing.py',155),
  ('iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement','iteration_statement',9,'p_iteration_statement','Parsing.py',156),
  ('iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON','iteration_statement',7,'p_iteration_statement','Parsing.py',157),
  ('expression_type -> empty','expression_type',1,'p_expression_type','Parsing.py',162),
  ('expression_type -> expression','expression_type',1,'p_expression_type','Parsing.py',163),
  ('expression -> assignment_expression','expression',1,'p_expression','Parsing.py',168),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','Parsing.py',169),
  ('assignment_expression -> equality_expression','assignment_expression',1,'p_assignment_expression_1','Parsing.py',174),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression_1','Parsing.py',175),
  ('assignment_operator -> ASSIGN','assignment_operator',1,'p_assignment_operator','Parsing.py',180),
  ('assignment_operator -> PLUSASSIGN','assignment_operator',1,'p_assignment_operator','Parsing.py',181),
  ('equality_expression -> relational_expression','equality_expression',1,'p_equality_expression','Parsing.py',186),
  ('equality_expression -> equality_expression EQ relational_expression','equality_expression',3,'p_equality_expression','Parsing.py',187),
  ('equality_expression -> equality_expression NOT_EQ relational_expression','equality_expression',3,'p_equality_expression','Parsing.py',188),
  ('relational_expression -> next_expression','relational_expression',1,'p_relational_expression','Parsing.py',193),
  ('relational_expression -> relational_expression LT next_expression','relational_expression',3,'p_relational_expression','Parsing.py',194),
  ('relational_expression -> relational_expression GT next_expression','relational_expression',3,'p_relational_expression','Parsing.py',195),
  ('relational_expression -> relational_expression LE next_expression','relational_expression',3,'p_relational_expression','Parsing.py',196),
  ('relational_expression -> relational_expression GE next_expression','relational_expression',3,'p_relational_expression','Parsing.py',197),
  ('multiplicative_expression -> cast_expression','multiplicative_expression',1,'p_multiplicative_expression','Parsing.py',202),
  ('multiplicative_expression -> multiplicative_expression TIMES cast_expression','multiplicative_expression',3,'p_multiplicative_expression','Parsing.py',203),
  ('multiplicative_expression -> multiplicative_expression DIVIDE cast_expression','multiplicative_expression',3,'p_multiplicative_expression','Parsing.py',204),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','Parsing.py',209),
  ('cast_expression -> LPAREN type_name RPAREN cast_expression','cast_expression',4,'p_cast_expression','Parsing.py',210),
  ('next_expression -> multiplicative_expression','next_expression',1,'p_next_expression','Parsing.py',215),
  ('next_expression -> next_expression PLUS multiplicative_expression','next_expression',3,'p_next_expression','Parsing.py',216),
  ('next_expression -> next_expression MINUS multiplicative_expression','next_expression',3,'p_next_expression','Parsing.py',217),
  ('unary_expression -> higher_expression','unary_expression',1,'p_unary_expression','Parsing.py',221),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','Parsing.py',222),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','Parsing.py',227),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','Parsing.py',228),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','Parsing.py',229),
  ('higher_expression -> primary_expression','higher_expression',1,'p_higher_expression','Parsing.py',234),
  ('higher_expression -> higher_expression LPAREN argument_expression_list RPAREN','higher_expression',4,'p_higher_expression','Parsing.py',235),
  ('higher_expression -> higher_expression LPAREN RPAREN','higher_expression',3,'p_higher_expression','Parsing.py',236),
  ('primary_expression -> IDENTIFIER','primary_expression',1,'p_primary_expression','Parsing.py',241),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression','Parsing.py',242),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','Parsing.py',243),
  ('argument_expression_list -> assignment_expression','argument_expression_list',1,'p_argument_expression_list','Parsing.py',248),
  ('argument_expression_list -> argument_expression_list COMMA assignment_expression','argument_expression_list',3,'p_argument_expression_list','Parsing.py',249),
  ('constant -> NUMBER','constant',1,'p_constant','Parsing.py',254),
  ('empty -> <empty>','empty',0,'p_empty','Parsing.py',259),
]
