
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ASSIGN CHAR COMMA DIVIDE DO ELSE EQ FOR GE GT IDENTIFIER IF INT LBRACE LE LPAREN LT MINUS NOT_EQ NUMBER PLUS PLUSASSIGN RBRACE RPAREN SEMICOLON TIMES WHILEstart : nested_stmnt\n             | variable_startervariable_detector : CHAR variable_detector\n                         | INT variable_detector\n                         | CHAR\n                         | INTassign_detector : identifier_punctuator\n                       | identifier_punctuator ASSIGN starting_bracevariable_starter : variable_detector assign_detector SEMICOLON\n                        | variable_detector assign_detector COMMA assign_detector SEMICOLON\n                        | variable_detector SEMICOLONvariable_starter_chains : variable_starter\n                               | variable_starter_chains variable_starteridentifier_punctuator : IDENTIFIER\n                             | LPAREN identifier_punctuator RPAREN\n                             | identifier_punctuator LPAREN parameter_variable_starter RPAREN\n                             | identifier_punctuator LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN\n                             | identifier_punctuator LPAREN IDENTIFIER RPAREN\n                             | identifier_punctuator LPAREN IDENTIFIER COMMA IDENTIFIER RPARENparameter_variable_starter : variable_detector identifier_punctuator\n                                  | variable_detector identifier_punctuator_2\n                                  | variable_detector emptystarting_brace : assigning\n                      | LBRACE starting_brace RBRACE\n                      | LBRACE starting_brace COMMA starting_brace RBRACE\n                      | LBRACE starting_brace COMMA RBRACE\n                      | LBRACE starting_brace COMMA starting_brace COMMA RBRACEvariable_detector_2 : variable_detector identifier_punctuator_2\n                           | variable_detector emptyidentifier_punctuator_2 : LPAREN identifier_punctuator_2 RPAREN\n                               | identifier_punctuator_2 LPAREN parameter_variable_starter RPAREN\n                               | identifier_punctuator_2 LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN\n                               | identifier_punctuator_2 LPAREN empty RPAREN\n                               | LPAREN parameter_variable_starter RPAREN\n                               | LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN\n                               | LPAREN empty RPARENstmnt :   expression_2 SEMICOLON\n             | nested_stmnt\n             | if\n             | loopsnested_stmnt : LBRACE variable_starter_chains stmnt_chains RBRACE\n                    | LBRACE stmnt_chains RBRACE\n                    | LBRACE variable_starter_chains RBRACE\n                    | LBRACE RBRACEstmnt_chains : stmnt\n                    | stmnt_chains stmntif : IF LPAREN expression RPAREN stmnt\n          | IF LPAREN expression RPAREN stmnt ELSE stmntloops : WHILE LPAREN expression RPAREN stmnt\n             | FOR LPAREN expression_2 SEMICOLON expression_2 SEMICOLON expression_2 RPAREN stmnt\n             | DO stmnt WHILE LPAREN expression RPAREN SEMICOLONexpression_2 : empty\n                    | expressionexpression : assigning\n                  | expression COMMA assigningassigning : equal_unequal\n                 | single_operand ASSIGN assigning\n                 | single_operand PLUSASSIGN assigningequal_unequal : comparison\n                     | equal_unequal EQ comparison\n                     | equal_unequal NOT_EQ comparisoncomparison : arithmetic_precedence\n                  | comparison LT arithmetic_precedence\n                  | comparison GT arithmetic_precedence\n                  | comparison LE arithmetic_precedence\n                  | comparison GE arithmetic_precedencemultiply_division : cast\n                         | multiply_division TIMES cast\n                         | multiply_division DIVIDE castcast : single_operand\n            | LPAREN variable_detector_2 RPAREN castarithmetic_precedence : multiply_division\n                             | arithmetic_precedence PLUS multiply_division\n                             | arithmetic_precedence MINUS multiply_divisionsingle_operand : expression_combination\n                      | TIMES cast\n                      | PLUS cast\n                      | MINUS castexpression_combination : IDENTIFIER\n                              | NUMBER\n                              | LPAREN expression RPAREN\n                              | expression_combination LPAREN assigning RPAREN\n                              | expression_combination LPAREN assigning COMMA assigning RPAREN\n                              | expression_combination LPAREN RPARENempty : '
    
_lr_action_items = {'LBRACE':([0,4,8,9,10,11,12,14,15,16,23,38,44,45,46,47,48,49,76,78,81,109,114,120,125,135,142,147,150,162,166,170,172,],[4,4,4,4,-44,-12,-45,-38,-39,-40,4,-11,4,-43,-13,-42,-46,-37,-9,109,-41,109,4,4,-10,-47,-49,109,4,-48,-51,4,-50,]),'CHAR':([0,4,6,7,8,11,20,38,46,69,76,79,88,116,125,128,134,140,152,],[6,6,6,6,6,-12,6,-11,-13,6,-9,6,6,6,-10,6,6,6,6,]),'INT':([0,4,6,7,8,11,20,38,46,69,76,79,88,116,125,128,134,140,152,],[7,7,7,7,7,-12,7,-11,-13,7,-9,7,7,7,-10,7,7,7,7,]),'$end':([1,2,3,10,38,45,47,76,81,125,],[0,-1,-2,-44,-11,-43,-42,-9,-41,-10,]),'RBRACE':([4,8,9,10,11,12,14,15,16,25,26,27,28,30,33,34,35,36,38,44,45,46,47,48,49,67,68,70,71,76,81,84,92,93,94,95,96,97,98,99,101,102,103,104,105,108,115,123,125,126,135,142,146,147,157,158,159,162,166,167,168,171,172,],[10,45,47,-44,-12,-45,-38,-39,-40,-56,-70,-59,-75,-67,-62,-79,-80,-72,-11,81,-43,-13,-42,-46,-37,-76,-70,-77,-78,-9,-41,-81,-60,-61,-57,-58,-63,-64,-65,-66,-84,-73,-74,-68,-69,-23,-71,-82,-10,146,-47,-49,-24,159,-83,168,-26,-48,-51,171,-25,-27,-50,]),'IF':([4,8,9,10,11,12,14,15,16,23,38,44,45,46,47,48,49,76,81,114,120,125,135,142,150,162,166,170,172,],[19,19,19,-44,-12,-45,-38,-39,-40,19,-11,19,-43,-13,-42,-46,-37,-9,-41,19,19,-10,-47,-49,19,-48,-51,19,-50,]),'WHILE':([4,8,9,10,11,12,14,15,16,23,38,44,45,46,47,48,49,57,76,81,114,120,125,135,142,150,162,166,170,172,],[21,21,21,-44,-12,-45,-38,-39,-40,21,-11,21,-43,-13,-42,-46,-37,91,-9,-41,21,21,-10,-47,-49,21,-48,-51,21,-50,]),'FOR':([4,8,9,10,11,12,14,15,16,23,38,44,45,46,47,48,49,76,81,114,120,125,135,142,150,162,166,170,172,],[22,22,22,-44,-12,-45,-38,-39,-40,22,-11,22,-43,-13,-42,-46,-37,-9,-41,22,22,-10,-47,-49,22,-48,-51,22,-50,]),'DO':([4,8,9,10,11,12,14,15,16,23,38,44,45,46,47,48,49,76,81,114,120,125,135,142,150,162,166,170,172,],[23,23,23,-44,-12,-45,-38,-39,-40,23,-11,23,-43,-13,-42,-46,-37,-9,-41,23,23,-10,-47,-49,23,-48,-51,23,-50,]),'SEMICOLON':([4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,23,24,25,26,27,28,30,33,34,35,36,37,38,39,40,42,43,44,45,46,47,48,49,56,67,68,70,71,76,81,82,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,113,114,115,120,121,123,125,127,129,135,142,143,146,150,156,157,159,160,161,162,166,168,170,171,172,],[-85,38,-5,-6,-85,-85,-44,-12,-45,49,-38,-39,-40,-52,-53,-85,-54,-56,-70,-59,-75,-67,-62,-79,-80,-72,76,-11,-7,-14,-3,-4,-85,-43,-13,-42,-46,-37,-85,-76,-70,-77,-78,-9,-41,-55,-81,121,-60,-61,-57,-58,-63,-64,-65,-66,-84,-73,-74,-68,-69,125,-8,-23,-15,-85,-71,-85,-85,-82,-10,-16,-18,-47,-49,155,-24,-85,166,-83,-26,-17,-19,-48,-51,-25,-85,-27,-50,]),'TIMES':([4,8,9,10,11,12,14,15,16,20,23,26,28,29,30,31,32,34,35,36,38,44,45,46,47,48,49,50,51,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,81,84,85,101,102,103,104,105,109,114,115,120,121,122,123,124,125,135,142,147,150,155,157,162,166,170,172,],[29,29,29,-44,-12,-45,-38,-39,-40,29,29,-70,-75,29,-67,29,29,-79,-80,74,-11,29,-43,-13,-42,-46,-37,29,29,29,29,29,29,29,29,29,29,29,29,29,-76,-70,29,-77,-78,29,29,29,29,-9,29,-41,-81,29,-84,74,74,-68,-69,29,29,-71,29,29,29,-82,29,-10,-47,-49,29,29,29,-83,-48,-51,29,-50,]),'PLUS':([4,8,9,10,11,12,14,15,16,20,23,26,28,29,30,31,32,33,34,35,36,38,44,45,46,47,48,49,50,51,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,81,84,85,96,97,98,99,101,102,103,104,105,109,114,115,120,121,122,123,124,125,135,142,147,150,155,157,162,166,170,172,],[31,31,31,-44,-12,-45,-38,-39,-40,31,31,-70,-75,31,-67,31,31,72,-79,-80,-72,-11,31,-43,-13,-42,-46,-37,31,31,31,31,31,31,31,31,31,31,31,31,31,-76,-70,31,-77,-78,31,31,31,31,-9,31,-41,-81,31,72,72,72,72,-84,-73,-74,-68,-69,31,31,-71,31,31,31,-82,31,-10,-47,-49,31,31,31,-83,-48,-51,31,-50,]),'MINUS':([4,8,9,10,11,12,14,15,16,20,23,26,28,29,30,31,32,33,34,35,36,38,44,45,46,47,48,49,50,51,55,56,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,78,81,84,85,96,97,98,99,101,102,103,104,105,109,114,115,120,121,122,123,124,125,135,142,147,150,155,157,162,166,170,172,],[32,32,32,-44,-12,-45,-38,-39,-40,32,32,-70,-75,32,-67,32,32,73,-79,-80,-72,-11,32,-43,-13,-42,-46,-37,32,32,32,32,32,32,32,32,32,32,32,32,32,-76,-70,32,-77,-78,32,32,32,32,-9,32,-41,-81,32,73,73,73,73,-84,-73,-74,-68,-69,32,32,-71,32,32,32,-82,32,-10,-47,-49,32,32,32,-83,-48,-51,32,-50,]),'IDENTIFIER':([4,5,6,7,8,9,10,11,12,14,15,16,20,23,29,31,32,38,41,42,43,44,45,46,47,48,49,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,76,77,78,79,81,85,109,112,114,120,121,122,124,125,130,134,135,142,147,150,155,162,166,170,172,],[34,40,-5,-6,34,34,-44,-12,-45,-38,-39,-40,34,34,34,34,34,-11,40,-3,-4,34,-43,-13,-42,-46,-37,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,-9,40,34,111,-41,34,34,40,34,34,34,34,34,-10,149,40,-47,-49,34,34,34,-48,-51,34,-50,]),'NUMBER':([4,8,9,10,11,12,14,15,16,20,23,29,31,32,38,44,45,46,47,48,49,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,76,78,81,85,109,114,120,121,122,124,125,135,142,147,150,155,162,166,170,172,],[35,35,35,-44,-12,-45,-38,-39,-40,35,35,35,35,35,-11,35,-43,-13,-42,-46,-37,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,-9,35,-41,35,35,35,35,35,35,35,-10,-47,-49,35,35,35,-48,-51,35,-50,]),'LPAREN':([4,5,6,7,8,9,10,11,12,14,15,16,19,20,21,22,23,28,29,31,32,34,35,38,39,40,41,42,43,44,45,46,47,48,49,50,51,54,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,76,77,78,80,81,84,85,86,88,91,101,109,112,113,114,117,120,121,122,123,124,125,127,129,131,132,134,135,138,139,141,142,147,150,151,153,155,157,160,161,162,164,166,169,170,172,],[20,41,-5,-6,20,20,-44,-12,-45,-38,-39,-40,51,20,55,56,20,66,69,69,69,-79,-80,-11,79,-14,41,-3,-4,20,-43,-13,-42,-46,-37,20,20,88,20,20,69,69,20,20,69,69,69,69,20,20,69,69,69,69,-9,41,20,79,-41,-81,69,116,88,122,-84,20,134,-15,20,116,20,20,20,-82,20,-10,-16,-18,79,116,134,-47,-30,-34,-36,-49,20,20,-31,-33,20,-83,-17,-19,-48,-35,-51,-32,20,-50,]),'RPAREN':([6,7,17,18,24,25,26,27,28,30,33,34,35,36,40,42,43,52,53,54,66,67,68,70,71,80,82,83,84,86,87,88,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,113,115,116,117,118,119,123,127,129,131,132,133,134,136,137,138,139,141,144,145,148,149,151,153,154,155,157,160,161,163,164,165,169,],[-5,-6,-52,-53,-54,-56,-70,-59,-75,-67,-62,-79,-80,-72,-14,-3,-4,84,85,-85,101,-76,-70,-77,-78,113,-55,114,-81,-28,-29,-85,120,-60,-61,-57,-58,-63,-64,-65,-66,123,-84,-73,-74,-68,-69,127,129,-85,-15,-71,-85,138,139,141,-82,-16,-18,-20,-21,-22,-85,151,153,-30,-34,-36,156,157,160,161,-31,-33,164,-85,-83,-17,-19,169,-35,170,-32,]),'COMMA':([6,7,18,24,25,26,27,28,30,33,34,35,36,37,39,40,42,43,52,67,68,70,71,82,83,84,89,92,93,94,95,96,97,98,99,100,101,102,103,104,105,107,108,110,111,112,113,115,118,123,126,127,129,131,132,133,136,138,139,141,144,146,151,153,157,158,159,160,161,164,168,169,171,],[-5,-6,50,-54,-56,-70,-59,-75,-67,-62,-79,-80,-72,77,-7,-14,-3,-4,50,-76,-70,-77,-78,-55,50,-81,50,-60,-61,-57,-58,-63,-64,-65,-66,124,-84,-73,-74,-68,-69,-8,-23,128,130,-85,-15,-71,140,-82,147,-16,-18,-20,-21,-22,152,-30,-34,-36,50,-24,-31,-33,-83,167,-26,-17,-19,-35,-25,-32,-27,]),'ELSE':([10,14,15,16,45,47,49,81,135,142,162,166,172,],[-44,-38,-39,-40,-43,-42,-37,-41,150,-49,-48,-51,-50,]),'EQ':([25,26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[58,-70,-59,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,-60,-61,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),'NOT_EQ':([25,26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[59,-70,-59,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,-60,-61,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),'ASSIGN':([26,28,34,35,39,40,67,68,70,71,84,101,113,115,123,127,129,157,160,161,],[60,-75,-79,-80,78,-14,-76,-70,-77,-78,-81,-84,-15,-71,-82,-16,-18,-83,-17,-19,]),'PLUSASSIGN':([26,28,34,35,67,68,70,71,84,101,115,123,157,],[61,-75,-79,-80,-76,-70,-77,-78,-81,-84,-71,-82,-83,]),'DIVIDE':([26,28,30,34,35,36,67,68,70,71,84,101,102,103,104,105,115,123,157,],[-70,-75,-67,-79,-80,75,-76,-70,-77,-78,-81,-84,75,75,-68,-69,-71,-82,-83,]),'LT':([26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[-70,62,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,62,62,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),'GT':([26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[-70,63,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,63,63,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),'LE':([26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[-70,64,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,64,64,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),'GE':([26,27,28,30,33,34,35,36,67,68,70,71,84,92,93,96,97,98,99,101,102,103,104,105,115,123,157,],[-70,65,-75,-67,-62,-79,-80,-72,-76,-70,-77,-78,-81,65,65,-63,-64,-65,-66,-84,-73,-74,-68,-69,-71,-82,-83,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'start':([0,],[1,]),'nested_stmnt':([0,4,8,9,23,44,114,120,150,170,],[2,14,14,14,14,14,14,14,14,14,]),'variable_starter':([0,4,8,],[3,11,46,]),'variable_detector':([0,4,6,7,8,20,69,79,88,116,128,134,140,152,],[5,5,42,43,5,54,54,112,112,112,112,112,112,112,]),'variable_starter_chains':([4,],[8,]),'stmnt_chains':([4,8,],[9,44,]),'stmnt':([4,8,9,23,44,114,120,150,170,],[12,12,48,57,48,135,142,162,172,]),'expression_2':([4,8,9,23,44,56,114,120,121,150,155,170,],[13,13,13,13,13,90,13,13,143,13,165,13,]),'if':([4,8,9,23,44,114,120,150,170,],[15,15,15,15,15,15,15,15,15,]),'loops':([4,8,9,23,44,114,120,150,170,],[16,16,16,16,16,16,16,16,16,]),'empty':([4,8,9,23,44,54,56,88,112,114,116,120,121,134,150,155,170,],[17,17,17,17,17,87,17,119,133,17,137,17,17,119,17,17,17,]),'expression':([4,8,9,20,23,44,51,55,56,69,114,120,121,122,150,155,170,],[18,18,18,52,18,18,83,89,18,52,18,18,18,144,18,18,18,]),'assigning':([4,8,9,20,23,44,50,51,55,56,60,61,66,69,78,109,114,120,121,122,124,147,150,155,170,],[24,24,24,24,24,24,82,24,24,24,94,95,100,24,108,108,24,24,24,24,145,108,24,24,24,]),'equal_unequal':([4,8,9,20,23,44,50,51,55,56,60,61,66,69,78,109,114,120,121,122,124,147,150,155,170,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'single_operand':([4,8,9,20,23,29,31,32,44,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,78,85,109,114,120,121,122,124,147,150,155,170,],[26,26,26,26,26,68,68,68,26,26,26,26,26,68,68,26,26,68,68,68,68,26,26,68,68,68,68,26,68,26,26,26,26,26,26,26,26,26,26,]),'comparison':([4,8,9,20,23,44,50,51,55,56,58,59,60,61,66,69,78,109,114,120,121,122,124,147,150,155,170,],[27,27,27,27,27,27,27,27,27,27,92,93,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'expression_combination':([4,8,9,20,23,29,31,32,44,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,78,85,109,114,120,121,122,124,147,150,155,170,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'cast':([4,8,9,20,23,29,31,32,44,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,74,75,78,85,109,114,120,121,122,124,147,150,155,170,],[30,30,30,30,30,67,70,71,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,30,104,105,30,115,30,30,30,30,30,30,30,30,30,30,]),'arithmetic_precedence':([4,8,9,20,23,44,50,51,55,56,58,59,60,61,62,63,64,65,66,69,78,109,114,120,121,122,124,147,150,155,170,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,96,97,98,99,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'multiply_division':([4,8,9,20,23,44,50,51,55,56,58,59,60,61,62,63,64,65,66,69,72,73,78,109,114,120,121,122,124,147,150,155,170,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,102,103,36,36,36,36,36,36,36,36,36,36,36,]),'assign_detector':([5,77,],[37,106,]),'identifier_punctuator':([5,41,77,112,134,],[39,80,39,131,80,]),'variable_detector_2':([20,69,],[53,53,]),'identifier_punctuator_2':([54,88,112,134,],[86,117,132,117,]),'starting_brace':([78,109,147,],[107,126,158,]),'parameter_variable_starter':([79,88,116,128,134,140,152,],[110,118,136,148,118,154,163,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> start","S'",1,None,None,None),
  ('start -> nested_stmnt','start',1,'p_start','Parsing.py',9),
  ('start -> variable_starter','start',1,'p_start','Parsing.py',10),
  ('variable_detector -> CHAR variable_detector','variable_detector',2,'p_variable_detector','Parsing.py',15),
  ('variable_detector -> INT variable_detector','variable_detector',2,'p_variable_detector','Parsing.py',16),
  ('variable_detector -> CHAR','variable_detector',1,'p_variable_detector','Parsing.py',17),
  ('variable_detector -> INT','variable_detector',1,'p_variable_detector','Parsing.py',18),
  ('assign_detector -> identifier_punctuator','assign_detector',1,'p_assign_detector','Parsing.py',23),
  ('assign_detector -> identifier_punctuator ASSIGN starting_brace','assign_detector',3,'p_assign_detector','Parsing.py',24),
  ('variable_starter -> variable_detector assign_detector SEMICOLON','variable_starter',3,'p_variable_starter','Parsing.py',29),
  ('variable_starter -> variable_detector assign_detector COMMA assign_detector SEMICOLON','variable_starter',5,'p_variable_starter','Parsing.py',30),
  ('variable_starter -> variable_detector SEMICOLON','variable_starter',2,'p_variable_starter','Parsing.py',31),
  ('variable_starter_chains -> variable_starter','variable_starter_chains',1,'p_variable_starter_chains','Parsing.py',36),
  ('variable_starter_chains -> variable_starter_chains variable_starter','variable_starter_chains',2,'p_variable_starter_chains','Parsing.py',37),
  ('identifier_punctuator -> IDENTIFIER','identifier_punctuator',1,'p_identifier_punctuator','Parsing.py',42),
  ('identifier_punctuator -> LPAREN identifier_punctuator RPAREN','identifier_punctuator',3,'p_identifier_punctuator','Parsing.py',43),
  ('identifier_punctuator -> identifier_punctuator LPAREN parameter_variable_starter RPAREN','identifier_punctuator',4,'p_identifier_punctuator','Parsing.py',44),
  ('identifier_punctuator -> identifier_punctuator LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN','identifier_punctuator',6,'p_identifier_punctuator','Parsing.py',45),
  ('identifier_punctuator -> identifier_punctuator LPAREN IDENTIFIER RPAREN','identifier_punctuator',4,'p_identifier_punctuator','Parsing.py',46),
  ('identifier_punctuator -> identifier_punctuator LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN','identifier_punctuator',6,'p_identifier_punctuator','Parsing.py',47),
  ('parameter_variable_starter -> variable_detector identifier_punctuator','parameter_variable_starter',2,'p_parameter_variable_starter','Parsing.py',52),
  ('parameter_variable_starter -> variable_detector identifier_punctuator_2','parameter_variable_starter',2,'p_parameter_variable_starter','Parsing.py',53),
  ('parameter_variable_starter -> variable_detector empty','parameter_variable_starter',2,'p_parameter_variable_starter','Parsing.py',54),
  ('starting_brace -> assigning','starting_brace',1,'p_starting_brace','Parsing.py',59),
  ('starting_brace -> LBRACE starting_brace RBRACE','starting_brace',3,'p_starting_brace','Parsing.py',60),
  ('starting_brace -> LBRACE starting_brace COMMA starting_brace RBRACE','starting_brace',5,'p_starting_brace','Parsing.py',61),
  ('starting_brace -> LBRACE starting_brace COMMA RBRACE','starting_brace',4,'p_starting_brace','Parsing.py',62),
  ('starting_brace -> LBRACE starting_brace COMMA starting_brace COMMA RBRACE','starting_brace',6,'p_starting_brace','Parsing.py',63),
  ('variable_detector_2 -> variable_detector identifier_punctuator_2','variable_detector_2',2,'p_variable_detector_2','Parsing.py',68),
  ('variable_detector_2 -> variable_detector empty','variable_detector_2',2,'p_variable_detector_2','Parsing.py',69),
  ('identifier_punctuator_2 -> LPAREN identifier_punctuator_2 RPAREN','identifier_punctuator_2',3,'p_identifier_punctuator_2','Parsing.py',74),
  ('identifier_punctuator_2 -> identifier_punctuator_2 LPAREN parameter_variable_starter RPAREN','identifier_punctuator_2',4,'p_identifier_punctuator_2','Parsing.py',75),
  ('identifier_punctuator_2 -> identifier_punctuator_2 LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN','identifier_punctuator_2',6,'p_identifier_punctuator_2','Parsing.py',76),
  ('identifier_punctuator_2 -> identifier_punctuator_2 LPAREN empty RPAREN','identifier_punctuator_2',4,'p_identifier_punctuator_2','Parsing.py',77),
  ('identifier_punctuator_2 -> LPAREN parameter_variable_starter RPAREN','identifier_punctuator_2',3,'p_identifier_punctuator_2','Parsing.py',78),
  ('identifier_punctuator_2 -> LPAREN parameter_variable_starter COMMA parameter_variable_starter RPAREN','identifier_punctuator_2',5,'p_identifier_punctuator_2','Parsing.py',79),
  ('identifier_punctuator_2 -> LPAREN empty RPAREN','identifier_punctuator_2',3,'p_identifier_punctuator_2','Parsing.py',80),
  ('stmnt -> expression_2 SEMICOLON','stmnt',2,'p_stmnt','Parsing.py',85),
  ('stmnt -> nested_stmnt','stmnt',1,'p_stmnt','Parsing.py',86),
  ('stmnt -> if','stmnt',1,'p_stmnt','Parsing.py',87),
  ('stmnt -> loops','stmnt',1,'p_stmnt','Parsing.py',88),
  ('nested_stmnt -> LBRACE variable_starter_chains stmnt_chains RBRACE','nested_stmnt',4,'p_nested_stmnt','Parsing.py',93),
  ('nested_stmnt -> LBRACE stmnt_chains RBRACE','nested_stmnt',3,'p_nested_stmnt','Parsing.py',94),
  ('nested_stmnt -> LBRACE variable_starter_chains RBRACE','nested_stmnt',3,'p_nested_stmnt','Parsing.py',95),
  ('nested_stmnt -> LBRACE RBRACE','nested_stmnt',2,'p_nested_stmnt','Parsing.py',96),
  ('stmnt_chains -> stmnt','stmnt_chains',1,'p_stmnt_chains','Parsing.py',101),
  ('stmnt_chains -> stmnt_chains stmnt','stmnt_chains',2,'p_stmnt_chains','Parsing.py',102),
  ('if -> IF LPAREN expression RPAREN stmnt','if',5,'p_if','Parsing.py',107),
  ('if -> IF LPAREN expression RPAREN stmnt ELSE stmnt','if',7,'p_if','Parsing.py',108),
  ('loops -> WHILE LPAREN expression RPAREN stmnt','loops',5,'p_loops','Parsing.py',113),
  ('loops -> FOR LPAREN expression_2 SEMICOLON expression_2 SEMICOLON expression_2 RPAREN stmnt','loops',9,'p_loops','Parsing.py',114),
  ('loops -> DO stmnt WHILE LPAREN expression RPAREN SEMICOLON','loops',7,'p_loops','Parsing.py',115),
  ('expression_2 -> empty','expression_2',1,'p_expression_2','Parsing.py',120),
  ('expression_2 -> expression','expression_2',1,'p_expression_2','Parsing.py',121),
  ('expression -> assigning','expression',1,'p_expression','Parsing.py',126),
  ('expression -> expression COMMA assigning','expression',3,'p_expression','Parsing.py',127),
  ('assigning -> equal_unequal','assigning',1,'p_assigning','Parsing.py',132),
  ('assigning -> single_operand ASSIGN assigning','assigning',3,'p_assigning','Parsing.py',133),
  ('assigning -> single_operand PLUSASSIGN assigning','assigning',3,'p_assigning','Parsing.py',134),
  ('equal_unequal -> comparison','equal_unequal',1,'p_equal_unequal','Parsing.py',139),
  ('equal_unequal -> equal_unequal EQ comparison','equal_unequal',3,'p_equal_unequal','Parsing.py',140),
  ('equal_unequal -> equal_unequal NOT_EQ comparison','equal_unequal',3,'p_equal_unequal','Parsing.py',141),
  ('comparison -> arithmetic_precedence','comparison',1,'p_comparison','Parsing.py',146),
  ('comparison -> comparison LT arithmetic_precedence','comparison',3,'p_comparison','Parsing.py',147),
  ('comparison -> comparison GT arithmetic_precedence','comparison',3,'p_comparison','Parsing.py',148),
  ('comparison -> comparison LE arithmetic_precedence','comparison',3,'p_comparison','Parsing.py',149),
  ('comparison -> comparison GE arithmetic_precedence','comparison',3,'p_comparison','Parsing.py',150),
  ('multiply_division -> cast','multiply_division',1,'p_multiply_division','Parsing.py',155),
  ('multiply_division -> multiply_division TIMES cast','multiply_division',3,'p_multiply_division','Parsing.py',156),
  ('multiply_division -> multiply_division DIVIDE cast','multiply_division',3,'p_multiply_division','Parsing.py',157),
  ('cast -> single_operand','cast',1,'p_cast','Parsing.py',162),
  ('cast -> LPAREN variable_detector_2 RPAREN cast','cast',4,'p_cast','Parsing.py',163),
  ('arithmetic_precedence -> multiply_division','arithmetic_precedence',1,'p_arithmetic_precedence','Parsing.py',168),
  ('arithmetic_precedence -> arithmetic_precedence PLUS multiply_division','arithmetic_precedence',3,'p_arithmetic_precedence','Parsing.py',169),
  ('arithmetic_precedence -> arithmetic_precedence MINUS multiply_division','arithmetic_precedence',3,'p_arithmetic_precedence','Parsing.py',170),
  ('single_operand -> expression_combination','single_operand',1,'p_single_operand','Parsing.py',175),
  ('single_operand -> TIMES cast','single_operand',2,'p_single_operand','Parsing.py',176),
  ('single_operand -> PLUS cast','single_operand',2,'p_single_operand','Parsing.py',177),
  ('single_operand -> MINUS cast','single_operand',2,'p_single_operand','Parsing.py',178),
  ('expression_combination -> IDENTIFIER','expression_combination',1,'p_expression_combination','Parsing.py',183),
  ('expression_combination -> NUMBER','expression_combination',1,'p_expression_combination','Parsing.py',184),
  ('expression_combination -> LPAREN expression RPAREN','expression_combination',3,'p_expression_combination','Parsing.py',185),
  ('expression_combination -> expression_combination LPAREN assigning RPAREN','expression_combination',4,'p_expression_combination','Parsing.py',186),
  ('expression_combination -> expression_combination LPAREN assigning COMMA assigning RPAREN','expression_combination',6,'p_expression_combination','Parsing.py',187),
  ('expression_combination -> expression_combination LPAREN RPAREN','expression_combination',3,'p_expression_combination','Parsing.py',188),
  ('empty -> <empty>','empty',0,'p_empty','Parsing.py',193),
]
