Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> compound_statement
Rule 2     start -> declaration
Rule 3     statement_type -> type_specifier statement_type
Rule 4     statement_type -> type_specifier
Rule 5     type_specifier -> CHAR
Rule 6     type_specifier -> INT
Rule 7     init_declarator_compound -> init_declarator
Rule 8     init_declarator_compound -> init_declarator_compound COMMA init_declarator
Rule 9     init_declarator -> simple_declarator
Rule 10    init_declarator -> simple_declarator ASSIGN initializer
Rule 11    multi_specifier -> type_specifier multi_specifier
Rule 12    multi_specifier -> type_specifier
Rule 13    declaration -> statement_type init_declarator_compound SEMICOLON
Rule 14    declaration -> statement_type SEMICOLON
Rule 15    declaration_compound -> declaration
Rule 16    declaration_compound -> declaration_compound declaration
Rule 17    simple_declarator -> IDENTIFIER
Rule 18    simple_declarator -> LPAREN simple_declarator RPAREN
Rule 19    simple_declarator -> simple_declarator LPAREN parameter_list RPAREN
Rule 20    simple_declarator -> simple_declarator LPAREN identifier_list RPAREN
Rule 21    parameter_list -> parameter_declaration
Rule 22    parameter_list -> parameter_list COMMA parameter_declaration
Rule 23    parameter_declaration -> statement_type simple_declarator
Rule 24    parameter_declaration -> statement_type declarator_type
Rule 25    identifier_list -> IDENTIFIER
Rule 26    identifier_list -> identifier_list COMMA IDENTIFIER
Rule 27    initializer -> assignment_expression
Rule 28    initializer -> LBRACE initializer_list RBRACE
Rule 29    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 30    initializer_list -> initializer
Rule 31    initializer_list -> initializer_list COMMA initializer
Rule 32    type_name -> multi_specifier declarator_type
Rule 33    declarator_type -> empty
Rule 34    declarator_type -> direct_single_declarator
Rule 35    direct_single_declarator -> LPAREN direct_single_declarator RPAREN
Rule 36    direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN
Rule 37    direct_single_declarator -> LPAREN parameter_type_list RPAREN
Rule 38    statement -> expression_statement
Rule 39    statement -> compound_statement
Rule 40    statement -> if_statement
Rule 41    statement -> iteration_statement
Rule 42    expression_statement -> expression_type SEMICOLON
Rule 43    compound_statement -> LBRACE declaration_compound statement_list RBRACE
Rule 44    compound_statement -> LBRACE statement_list RBRACE
Rule 45    compound_statement -> LBRACE declaration_compound RBRACE
Rule 46    compound_statement -> LBRACE RBRACE
Rule 47    statement_list -> statement
Rule 48    statement_list -> statement_list statement
Rule 49    parameter_type_list -> empty
Rule 50    parameter_type_list -> parameter_list
Rule 51    if_statement -> IF LPAREN expression RPAREN statement
Rule 52    if_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 53    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 54    iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
Rule 55    iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON
Rule 56    expression_type -> empty
Rule 57    expression_type -> expression
Rule 58    expression -> assignment_expression
Rule 59    expression -> expression COMMA assignment_expression
Rule 60    assignment_expression -> equality_expression
Rule 61    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 62    assignment_operator -> ASSIGN
Rule 63    assignment_operator -> PLUSASSIGN
Rule 64    equality_expression -> relational_expression
Rule 65    equality_expression -> equality_expression EQ relational_expression
Rule 66    equality_expression -> equality_expression NOT_EQ relational_expression
Rule 67    relational_expression -> next_expression
Rule 68    relational_expression -> relational_expression LT next_expression
Rule 69    relational_expression -> relational_expression GT next_expression
Rule 70    relational_expression -> relational_expression LE next_expression
Rule 71    relational_expression -> relational_expression GE next_expression
Rule 72    multiplicative_expression -> cast_expression
Rule 73    multiplicative_expression -> multiplicative_expression TIMES cast_expression
Rule 74    multiplicative_expression -> multiplicative_expression DIVIDE cast_expression
Rule 75    cast_expression -> unary_expression
Rule 76    cast_expression -> LPAREN type_name RPAREN cast_expression
Rule 77    next_expression -> multiplicative_expression
Rule 78    next_expression -> next_expression PLUS multiplicative_expression
Rule 79    next_expression -> next_expression MINUS multiplicative_expression
Rule 80    unary_expression -> higher_expression
Rule 81    unary_expression -> unary_operator cast_expression
Rule 82    unary_operator -> TIMES
Rule 83    unary_operator -> PLUS
Rule 84    unary_operator -> MINUS
Rule 85    higher_expression -> primary_expression
Rule 86    higher_expression -> higher_expression LPAREN argument_expression_list RPAREN
Rule 87    higher_expression -> higher_expression LPAREN RPAREN
Rule 88    primary_expression -> IDENTIFIER
Rule 89    primary_expression -> constant
Rule 90    primary_expression -> LPAREN expression RPAREN
Rule 91    argument_expression_list -> assignment_expression
Rule 92    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 93    constant -> NUMBER
Rule 94    empty -> <empty>

Terminals, with rules where they appear

ASSIGN               : 10 62
CHAR                 : 5
COMMA                : 8 22 26 29 31 59 92
DIVIDE               : 74
DO                   : 55
ELSE                 : 52
EQ                   : 65
FOR                  : 54
GE                   : 71
GT                   : 69
IDENTIFIER           : 17 25 26 88
IF                   : 51 52
INT                  : 6
LBRACE               : 28 29 43 44 45 46
LE                   : 70
LPAREN               : 18 19 20 35 36 37 51 52 53 54 55 76 86 87 90
LT                   : 68
MINUS                : 79 84
NOT_EQ               : 66
NUMBER               : 93
PLUS                 : 78 83
PLUSASSIGN           : 63
RBRACE               : 28 29 43 44 45 46
RPAREN               : 18 19 20 35 36 37 51 52 53 54 55 76 86 87 90
SEMICOLON            : 13 14 42 54 54 55
TIMES                : 73 82
WHILE                : 53 55
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 86 92
assignment_expression : 27 58 59 61 91 92
assignment_operator  : 61
cast_expression      : 72 73 74 76 81
compound_statement   : 1 39
constant             : 89
declaration          : 2 15 16
declaration_compound : 16 43 45
declarator_type      : 24 32
direct_single_declarator : 34 35 36
empty                : 33 49 56
equality_expression  : 60 65 66
expression           : 51 52 53 55 57 59 90
expression_statement : 38
expression_type      : 42 54 54 54
higher_expression    : 80 86 87
identifier_list      : 20 26
if_statement         : 40
init_declarator      : 7 8
init_declarator_compound : 8 13
initializer          : 10 30 31
initializer_list     : 28 29 31
iteration_statement  : 41
multi_specifier      : 11 32
multiplicative_expression : 73 74 77 78 79
next_expression      : 67 68 69 70 71 78 79
parameter_declaration : 21 22
parameter_list       : 19 22 50
parameter_type_list  : 36 37
primary_expression   : 85
relational_expression : 64 65 66 68 69 70 71
simple_declarator    : 9 10 18 19 20 23
start                : 0
statement            : 47 48 51 52 52 53 54 55
statement_list       : 43 44 48
statement_type       : 3 13 14 23 24
type_name            : 76
type_specifier       : 3 4 11 12
unary_expression     : 61 75
unary_operator       : 81

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . compound_statement
    (2) start -> . declaration
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (13) declaration -> . statement_type init_declarator_compound SEMICOLON
    (14) declaration -> . statement_type SEMICOLON
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    LBRACE          shift and go to state 4
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    start                          shift and go to state 1
    compound_statement             shift and go to state 2
    declaration                    shift and go to state 3
    statement_type                 shift and go to state 5
    type_specifier                 shift and go to state 6

state 1

    (0) S' -> start .



state 2

    (1) start -> compound_statement .

    $end            reduce using rule 1 (start -> compound_statement .)


state 3

    (2) start -> declaration .

    $end            reduce using rule 2 (start -> declaration .)


state 4

    (43) compound_statement -> LBRACE . declaration_compound statement_list RBRACE
    (44) compound_statement -> LBRACE . statement_list RBRACE
    (45) compound_statement -> LBRACE . declaration_compound RBRACE
    (46) compound_statement -> LBRACE . RBRACE
    (15) declaration_compound -> . declaration
    (16) declaration_compound -> . declaration_compound declaration
    (47) statement_list -> . statement
    (48) statement_list -> . statement_list statement
    (13) declaration -> . statement_type init_declarator_compound SEMICOLON
    (14) declaration -> . statement_type SEMICOLON
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 11
    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    CHAR            shift and go to state 7
    INT             shift and go to state 8
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    declaration_compound           shift and go to state 9
    statement_list                 shift and go to state 10
    declaration                    shift and go to state 12
    statement                      shift and go to state 13
    statement_type                 shift and go to state 5
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    type_specifier                 shift and go to state 6
    expression_type                shift and go to state 18
    expression                     shift and go to state 21
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 5

    (13) declaration -> statement_type . init_declarator_compound SEMICOLON
    (14) declaration -> statement_type . SEMICOLON
    (7) init_declarator_compound -> . init_declarator
    (8) init_declarator_compound -> . init_declarator_compound COMMA init_declarator
    (9) init_declarator -> . simple_declarator
    (10) init_declarator -> . simple_declarator ASSIGN initializer
    (17) simple_declarator -> . IDENTIFIER
    (18) simple_declarator -> . LPAREN simple_declarator RPAREN
    (19) simple_declarator -> . simple_declarator LPAREN parameter_list RPAREN
    (20) simple_declarator -> . simple_declarator LPAREN identifier_list RPAREN

    SEMICOLON       shift and go to state 43
    IDENTIFIER      shift and go to state 46
    LPAREN          shift and go to state 47

    init_declarator_compound       shift and go to state 42
    init_declarator                shift and go to state 44
    simple_declarator              shift and go to state 45

state 6

    (3) statement_type -> type_specifier . statement_type
    (4) statement_type -> type_specifier .
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    SEMICOLON       reduce using rule 4 (statement_type -> type_specifier .)
    IDENTIFIER      reduce using rule 4 (statement_type -> type_specifier .)
    LPAREN          reduce using rule 4 (statement_type -> type_specifier .)
    RPAREN          reduce using rule 4 (statement_type -> type_specifier .)
    COMMA           reduce using rule 4 (statement_type -> type_specifier .)
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    type_specifier                 shift and go to state 6
    statement_type                 shift and go to state 48

state 7

    (5) type_specifier -> CHAR .

    CHAR            reduce using rule 5 (type_specifier -> CHAR .)
    INT             reduce using rule 5 (type_specifier -> CHAR .)
    SEMICOLON       reduce using rule 5 (type_specifier -> CHAR .)
    IDENTIFIER      reduce using rule 5 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 5 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 5 (type_specifier -> CHAR .)
    COMMA           reduce using rule 5 (type_specifier -> CHAR .)


state 8

    (6) type_specifier -> INT .

    CHAR            reduce using rule 6 (type_specifier -> INT .)
    INT             reduce using rule 6 (type_specifier -> INT .)
    SEMICOLON       reduce using rule 6 (type_specifier -> INT .)
    IDENTIFIER      reduce using rule 6 (type_specifier -> INT .)
    LPAREN          reduce using rule 6 (type_specifier -> INT .)
    RPAREN          reduce using rule 6 (type_specifier -> INT .)
    COMMA           reduce using rule 6 (type_specifier -> INT .)


state 9

    (43) compound_statement -> LBRACE declaration_compound . statement_list RBRACE
    (45) compound_statement -> LBRACE declaration_compound . RBRACE
    (16) declaration_compound -> declaration_compound . declaration
    (47) statement_list -> . statement
    (48) statement_list -> . statement_list statement
    (13) declaration -> . statement_type init_declarator_compound SEMICOLON
    (14) declaration -> . statement_type SEMICOLON
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 50
    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    CHAR            shift and go to state 7
    INT             shift and go to state 8
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    statement_list                 shift and go to state 49
    declaration                    shift and go to state 51
    statement                      shift and go to state 13
    statement_type                 shift and go to state 5
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    type_specifier                 shift and go to state 6
    expression_type                shift and go to state 18
    expression                     shift and go to state 21
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 10

    (44) compound_statement -> LBRACE statement_list . RBRACE
    (48) statement_list -> statement_list . statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 52
    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    statement                      shift and go to state 53
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    expression                     shift and go to state 21
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 11

    (46) compound_statement -> LBRACE RBRACE .

    $end            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    RBRACE          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    LBRACE          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    IF              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    WHILE           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    FOR             reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    DO              reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    TIMES           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    PLUS            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    MINUS           reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    IDENTIFIER      reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    LPAREN          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    NUMBER          reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    SEMICOLON       reduce using rule 46 (compound_statement -> LBRACE RBRACE .)
    ELSE            reduce using rule 46 (compound_statement -> LBRACE RBRACE .)


state 12

    (15) declaration_compound -> declaration .

    RBRACE          reduce using rule 15 (declaration_compound -> declaration .)
    LBRACE          reduce using rule 15 (declaration_compound -> declaration .)
    IF              reduce using rule 15 (declaration_compound -> declaration .)
    WHILE           reduce using rule 15 (declaration_compound -> declaration .)
    FOR             reduce using rule 15 (declaration_compound -> declaration .)
    DO              reduce using rule 15 (declaration_compound -> declaration .)
    CHAR            reduce using rule 15 (declaration_compound -> declaration .)
    INT             reduce using rule 15 (declaration_compound -> declaration .)
    TIMES           reduce using rule 15 (declaration_compound -> declaration .)
    PLUS            reduce using rule 15 (declaration_compound -> declaration .)
    MINUS           reduce using rule 15 (declaration_compound -> declaration .)
    IDENTIFIER      reduce using rule 15 (declaration_compound -> declaration .)
    LPAREN          reduce using rule 15 (declaration_compound -> declaration .)
    NUMBER          reduce using rule 15 (declaration_compound -> declaration .)
    SEMICOLON       reduce using rule 15 (declaration_compound -> declaration .)


state 13

    (47) statement_list -> statement .

    RBRACE          reduce using rule 47 (statement_list -> statement .)
    LBRACE          reduce using rule 47 (statement_list -> statement .)
    IF              reduce using rule 47 (statement_list -> statement .)
    WHILE           reduce using rule 47 (statement_list -> statement .)
    FOR             reduce using rule 47 (statement_list -> statement .)
    DO              reduce using rule 47 (statement_list -> statement .)
    TIMES           reduce using rule 47 (statement_list -> statement .)
    PLUS            reduce using rule 47 (statement_list -> statement .)
    MINUS           reduce using rule 47 (statement_list -> statement .)
    IDENTIFIER      reduce using rule 47 (statement_list -> statement .)
    LPAREN          reduce using rule 47 (statement_list -> statement .)
    NUMBER          reduce using rule 47 (statement_list -> statement .)
    SEMICOLON       reduce using rule 47 (statement_list -> statement .)


state 14

    (38) statement -> expression_statement .

    RBRACE          reduce using rule 38 (statement -> expression_statement .)
    LBRACE          reduce using rule 38 (statement -> expression_statement .)
    IF              reduce using rule 38 (statement -> expression_statement .)
    WHILE           reduce using rule 38 (statement -> expression_statement .)
    FOR             reduce using rule 38 (statement -> expression_statement .)
    DO              reduce using rule 38 (statement -> expression_statement .)
    TIMES           reduce using rule 38 (statement -> expression_statement .)
    PLUS            reduce using rule 38 (statement -> expression_statement .)
    MINUS           reduce using rule 38 (statement -> expression_statement .)
    IDENTIFIER      reduce using rule 38 (statement -> expression_statement .)
    LPAREN          reduce using rule 38 (statement -> expression_statement .)
    NUMBER          reduce using rule 38 (statement -> expression_statement .)
    SEMICOLON       reduce using rule 38 (statement -> expression_statement .)
    ELSE            reduce using rule 38 (statement -> expression_statement .)


state 15

    (39) statement -> compound_statement .

    RBRACE          reduce using rule 39 (statement -> compound_statement .)
    LBRACE          reduce using rule 39 (statement -> compound_statement .)
    IF              reduce using rule 39 (statement -> compound_statement .)
    WHILE           reduce using rule 39 (statement -> compound_statement .)
    FOR             reduce using rule 39 (statement -> compound_statement .)
    DO              reduce using rule 39 (statement -> compound_statement .)
    TIMES           reduce using rule 39 (statement -> compound_statement .)
    PLUS            reduce using rule 39 (statement -> compound_statement .)
    MINUS           reduce using rule 39 (statement -> compound_statement .)
    IDENTIFIER      reduce using rule 39 (statement -> compound_statement .)
    LPAREN          reduce using rule 39 (statement -> compound_statement .)
    NUMBER          reduce using rule 39 (statement -> compound_statement .)
    SEMICOLON       reduce using rule 39 (statement -> compound_statement .)
    ELSE            reduce using rule 39 (statement -> compound_statement .)


state 16

    (40) statement -> if_statement .

    RBRACE          reduce using rule 40 (statement -> if_statement .)
    LBRACE          reduce using rule 40 (statement -> if_statement .)
    IF              reduce using rule 40 (statement -> if_statement .)
    WHILE           reduce using rule 40 (statement -> if_statement .)
    FOR             reduce using rule 40 (statement -> if_statement .)
    DO              reduce using rule 40 (statement -> if_statement .)
    TIMES           reduce using rule 40 (statement -> if_statement .)
    PLUS            reduce using rule 40 (statement -> if_statement .)
    MINUS           reduce using rule 40 (statement -> if_statement .)
    IDENTIFIER      reduce using rule 40 (statement -> if_statement .)
    LPAREN          reduce using rule 40 (statement -> if_statement .)
    NUMBER          reduce using rule 40 (statement -> if_statement .)
    SEMICOLON       reduce using rule 40 (statement -> if_statement .)
    ELSE            reduce using rule 40 (statement -> if_statement .)


state 17

    (41) statement -> iteration_statement .

    RBRACE          reduce using rule 41 (statement -> iteration_statement .)
    LBRACE          reduce using rule 41 (statement -> iteration_statement .)
    IF              reduce using rule 41 (statement -> iteration_statement .)
    WHILE           reduce using rule 41 (statement -> iteration_statement .)
    FOR             reduce using rule 41 (statement -> iteration_statement .)
    DO              reduce using rule 41 (statement -> iteration_statement .)
    TIMES           reduce using rule 41 (statement -> iteration_statement .)
    PLUS            reduce using rule 41 (statement -> iteration_statement .)
    MINUS           reduce using rule 41 (statement -> iteration_statement .)
    IDENTIFIER      reduce using rule 41 (statement -> iteration_statement .)
    LPAREN          reduce using rule 41 (statement -> iteration_statement .)
    NUMBER          reduce using rule 41 (statement -> iteration_statement .)
    SEMICOLON       reduce using rule 41 (statement -> iteration_statement .)
    ELSE            reduce using rule 41 (statement -> iteration_statement .)


state 18

    (42) expression_statement -> expression_type . SEMICOLON

    SEMICOLON       shift and go to state 54


state 19

    (51) if_statement -> IF . LPAREN expression RPAREN statement
    (52) if_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 55


state 20

    (90) primary_expression -> LPAREN . expression RPAREN
    (76) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (32) type_name -> . multi_specifier declarator_type
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (11) multi_specifier -> . type_specifier multi_specifier
    (12) multi_specifier -> . type_specifier
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CHAR            shift and go to state 7
    INT             shift and go to state 8
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 56
    type_name                      shift and go to state 57
    cast_expression                shift and go to state 32
    assignment_expression          shift and go to state 26
    multi_specifier                shift and go to state 58
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    type_specifier                 shift and go to state 59
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 21

    (57) expression_type -> expression .
    (59) expression -> expression . COMMA assignment_expression

    SEMICOLON       reduce using rule 57 (expression_type -> expression .)
    RPAREN          reduce using rule 57 (expression_type -> expression .)
    COMMA           shift and go to state 60


state 22

    (53) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 61


state 23

    (54) iteration_statement -> FOR . LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement

    LPAREN          shift and go to state 62


state 24

    (55) iteration_statement -> DO . statement WHILE LPAREN expression RPAREN SEMICOLON
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    statement                      shift and go to state 63
    expression                     shift and go to state 21
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 25

    (56) expression_type -> empty .

    SEMICOLON       reduce using rule 56 (expression_type -> empty .)
    RPAREN          reduce using rule 56 (expression_type -> empty .)


state 26

    (58) expression -> assignment_expression .

    COMMA           reduce using rule 58 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 58 (expression -> assignment_expression .)
    RPAREN          reduce using rule 58 (expression -> assignment_expression .)


state 27

    (60) assignment_expression -> equality_expression .
    (65) equality_expression -> equality_expression . EQ relational_expression
    (66) equality_expression -> equality_expression . NOT_EQ relational_expression

    COMMA           reduce using rule 60 (assignment_expression -> equality_expression .)
    SEMICOLON       reduce using rule 60 (assignment_expression -> equality_expression .)
    RPAREN          reduce using rule 60 (assignment_expression -> equality_expression .)
    RBRACE          reduce using rule 60 (assignment_expression -> equality_expression .)
    EQ              shift and go to state 64
    NOT_EQ          shift and go to state 65


state 28

    (61) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (75) cast_expression -> unary_expression .
    (62) assignment_operator -> . ASSIGN
    (63) assignment_operator -> . PLUSASSIGN

    TIMES           reduce using rule 75 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 75 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 75 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 75 (cast_expression -> unary_expression .)
    LT              reduce using rule 75 (cast_expression -> unary_expression .)
    GT              reduce using rule 75 (cast_expression -> unary_expression .)
    LE              reduce using rule 75 (cast_expression -> unary_expression .)
    GE              reduce using rule 75 (cast_expression -> unary_expression .)
    EQ              reduce using rule 75 (cast_expression -> unary_expression .)
    NOT_EQ          reduce using rule 75 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 75 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 75 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 75 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 75 (cast_expression -> unary_expression .)
    ASSIGN          shift and go to state 67
    PLUSASSIGN      shift and go to state 68

    assignment_operator            shift and go to state 66

state 29

    (64) equality_expression -> relational_expression .
    (68) relational_expression -> relational_expression . LT next_expression
    (69) relational_expression -> relational_expression . GT next_expression
    (70) relational_expression -> relational_expression . LE next_expression
    (71) relational_expression -> relational_expression . GE next_expression

    EQ              reduce using rule 64 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 64 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 64 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 64 (equality_expression -> relational_expression .)
    RPAREN          reduce using rule 64 (equality_expression -> relational_expression .)
    RBRACE          reduce using rule 64 (equality_expression -> relational_expression .)
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72


state 30

    (80) unary_expression -> higher_expression .
    (86) higher_expression -> higher_expression . LPAREN argument_expression_list RPAREN
    (87) higher_expression -> higher_expression . LPAREN RPAREN

    ASSIGN          reduce using rule 80 (unary_expression -> higher_expression .)
    PLUSASSIGN      reduce using rule 80 (unary_expression -> higher_expression .)
    TIMES           reduce using rule 80 (unary_expression -> higher_expression .)
    DIVIDE          reduce using rule 80 (unary_expression -> higher_expression .)
    PLUS            reduce using rule 80 (unary_expression -> higher_expression .)
    MINUS           reduce using rule 80 (unary_expression -> higher_expression .)
    LT              reduce using rule 80 (unary_expression -> higher_expression .)
    GT              reduce using rule 80 (unary_expression -> higher_expression .)
    LE              reduce using rule 80 (unary_expression -> higher_expression .)
    GE              reduce using rule 80 (unary_expression -> higher_expression .)
    EQ              reduce using rule 80 (unary_expression -> higher_expression .)
    NOT_EQ          reduce using rule 80 (unary_expression -> higher_expression .)
    COMMA           reduce using rule 80 (unary_expression -> higher_expression .)
    SEMICOLON       reduce using rule 80 (unary_expression -> higher_expression .)
    RPAREN          reduce using rule 80 (unary_expression -> higher_expression .)
    RBRACE          reduce using rule 80 (unary_expression -> higher_expression .)
    LPAREN          shift and go to state 73


state 31

    (81) unary_expression -> unary_operator . cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 74
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 32

    (72) multiplicative_expression -> cast_expression .

    TIMES           reduce using rule 72 (multiplicative_expression -> cast_expression .)
    DIVIDE          reduce using rule 72 (multiplicative_expression -> cast_expression .)
    PLUS            reduce using rule 72 (multiplicative_expression -> cast_expression .)
    MINUS           reduce using rule 72 (multiplicative_expression -> cast_expression .)
    LT              reduce using rule 72 (multiplicative_expression -> cast_expression .)
    GT              reduce using rule 72 (multiplicative_expression -> cast_expression .)
    LE              reduce using rule 72 (multiplicative_expression -> cast_expression .)
    GE              reduce using rule 72 (multiplicative_expression -> cast_expression .)
    EQ              reduce using rule 72 (multiplicative_expression -> cast_expression .)
    NOT_EQ          reduce using rule 72 (multiplicative_expression -> cast_expression .)
    COMMA           reduce using rule 72 (multiplicative_expression -> cast_expression .)
    SEMICOLON       reduce using rule 72 (multiplicative_expression -> cast_expression .)
    RPAREN          reduce using rule 72 (multiplicative_expression -> cast_expression .)
    RBRACE          reduce using rule 72 (multiplicative_expression -> cast_expression .)


state 33

    (67) relational_expression -> next_expression .
    (78) next_expression -> next_expression . PLUS multiplicative_expression
    (79) next_expression -> next_expression . MINUS multiplicative_expression

    LT              reduce using rule 67 (relational_expression -> next_expression .)
    GT              reduce using rule 67 (relational_expression -> next_expression .)
    LE              reduce using rule 67 (relational_expression -> next_expression .)
    GE              reduce using rule 67 (relational_expression -> next_expression .)
    EQ              reduce using rule 67 (relational_expression -> next_expression .)
    NOT_EQ          reduce using rule 67 (relational_expression -> next_expression .)
    COMMA           reduce using rule 67 (relational_expression -> next_expression .)
    SEMICOLON       reduce using rule 67 (relational_expression -> next_expression .)
    RPAREN          reduce using rule 67 (relational_expression -> next_expression .)
    RBRACE          reduce using rule 67 (relational_expression -> next_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78


state 34

    (85) higher_expression -> primary_expression .

    LPAREN          reduce using rule 85 (higher_expression -> primary_expression .)
    ASSIGN          reduce using rule 85 (higher_expression -> primary_expression .)
    PLUSASSIGN      reduce using rule 85 (higher_expression -> primary_expression .)
    TIMES           reduce using rule 85 (higher_expression -> primary_expression .)
    DIVIDE          reduce using rule 85 (higher_expression -> primary_expression .)
    PLUS            reduce using rule 85 (higher_expression -> primary_expression .)
    MINUS           reduce using rule 85 (higher_expression -> primary_expression .)
    LT              reduce using rule 85 (higher_expression -> primary_expression .)
    GT              reduce using rule 85 (higher_expression -> primary_expression .)
    LE              reduce using rule 85 (higher_expression -> primary_expression .)
    GE              reduce using rule 85 (higher_expression -> primary_expression .)
    EQ              reduce using rule 85 (higher_expression -> primary_expression .)
    NOT_EQ          reduce using rule 85 (higher_expression -> primary_expression .)
    COMMA           reduce using rule 85 (higher_expression -> primary_expression .)
    SEMICOLON       reduce using rule 85 (higher_expression -> primary_expression .)
    RPAREN          reduce using rule 85 (higher_expression -> primary_expression .)
    RBRACE          reduce using rule 85 (higher_expression -> primary_expression .)


state 35

    (82) unary_operator -> TIMES .

    LPAREN          reduce using rule 82 (unary_operator -> TIMES .)
    TIMES           reduce using rule 82 (unary_operator -> TIMES .)
    PLUS            reduce using rule 82 (unary_operator -> TIMES .)
    MINUS           reduce using rule 82 (unary_operator -> TIMES .)
    IDENTIFIER      reduce using rule 82 (unary_operator -> TIMES .)
    NUMBER          reduce using rule 82 (unary_operator -> TIMES .)


state 36

    (83) unary_operator -> PLUS .

    LPAREN          reduce using rule 83 (unary_operator -> PLUS .)
    TIMES           reduce using rule 83 (unary_operator -> PLUS .)
    PLUS            reduce using rule 83 (unary_operator -> PLUS .)
    MINUS           reduce using rule 83 (unary_operator -> PLUS .)
    IDENTIFIER      reduce using rule 83 (unary_operator -> PLUS .)
    NUMBER          reduce using rule 83 (unary_operator -> PLUS .)


state 37

    (84) unary_operator -> MINUS .

    LPAREN          reduce using rule 84 (unary_operator -> MINUS .)
    TIMES           reduce using rule 84 (unary_operator -> MINUS .)
    PLUS            reduce using rule 84 (unary_operator -> MINUS .)
    MINUS           reduce using rule 84 (unary_operator -> MINUS .)
    IDENTIFIER      reduce using rule 84 (unary_operator -> MINUS .)
    NUMBER          reduce using rule 84 (unary_operator -> MINUS .)


state 38

    (77) next_expression -> multiplicative_expression .
    (73) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (74) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression

    PLUS            reduce using rule 77 (next_expression -> multiplicative_expression .)
    MINUS           reduce using rule 77 (next_expression -> multiplicative_expression .)
    LT              reduce using rule 77 (next_expression -> multiplicative_expression .)
    GT              reduce using rule 77 (next_expression -> multiplicative_expression .)
    LE              reduce using rule 77 (next_expression -> multiplicative_expression .)
    GE              reduce using rule 77 (next_expression -> multiplicative_expression .)
    EQ              reduce using rule 77 (next_expression -> multiplicative_expression .)
    NOT_EQ          reduce using rule 77 (next_expression -> multiplicative_expression .)
    COMMA           reduce using rule 77 (next_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 77 (next_expression -> multiplicative_expression .)
    RPAREN          reduce using rule 77 (next_expression -> multiplicative_expression .)
    RBRACE          reduce using rule 77 (next_expression -> multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80


state 39

    (88) primary_expression -> IDENTIFIER .

    LPAREN          reduce using rule 88 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 88 (primary_expression -> IDENTIFIER .)
    PLUSASSIGN      reduce using rule 88 (primary_expression -> IDENTIFIER .)
    TIMES           reduce using rule 88 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 88 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 88 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 88 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 88 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 88 (primary_expression -> IDENTIFIER .)
    LE              reduce using rule 88 (primary_expression -> IDENTIFIER .)
    GE              reduce using rule 88 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 88 (primary_expression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 88 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 88 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 88 (primary_expression -> IDENTIFIER .)
    RPAREN          reduce using rule 88 (primary_expression -> IDENTIFIER .)
    RBRACE          reduce using rule 88 (primary_expression -> IDENTIFIER .)


state 40

    (89) primary_expression -> constant .

    LPAREN          reduce using rule 89 (primary_expression -> constant .)
    ASSIGN          reduce using rule 89 (primary_expression -> constant .)
    PLUSASSIGN      reduce using rule 89 (primary_expression -> constant .)
    TIMES           reduce using rule 89 (primary_expression -> constant .)
    DIVIDE          reduce using rule 89 (primary_expression -> constant .)
    PLUS            reduce using rule 89 (primary_expression -> constant .)
    MINUS           reduce using rule 89 (primary_expression -> constant .)
    LT              reduce using rule 89 (primary_expression -> constant .)
    GT              reduce using rule 89 (primary_expression -> constant .)
    LE              reduce using rule 89 (primary_expression -> constant .)
    GE              reduce using rule 89 (primary_expression -> constant .)
    EQ              reduce using rule 89 (primary_expression -> constant .)
    NOT_EQ          reduce using rule 89 (primary_expression -> constant .)
    COMMA           reduce using rule 89 (primary_expression -> constant .)
    SEMICOLON       reduce using rule 89 (primary_expression -> constant .)
    RPAREN          reduce using rule 89 (primary_expression -> constant .)
    RBRACE          reduce using rule 89 (primary_expression -> constant .)


state 41

    (93) constant -> NUMBER .

    LPAREN          reduce using rule 93 (constant -> NUMBER .)
    ASSIGN          reduce using rule 93 (constant -> NUMBER .)
    PLUSASSIGN      reduce using rule 93 (constant -> NUMBER .)
    TIMES           reduce using rule 93 (constant -> NUMBER .)
    DIVIDE          reduce using rule 93 (constant -> NUMBER .)
    PLUS            reduce using rule 93 (constant -> NUMBER .)
    MINUS           reduce using rule 93 (constant -> NUMBER .)
    LT              reduce using rule 93 (constant -> NUMBER .)
    GT              reduce using rule 93 (constant -> NUMBER .)
    LE              reduce using rule 93 (constant -> NUMBER .)
    GE              reduce using rule 93 (constant -> NUMBER .)
    EQ              reduce using rule 93 (constant -> NUMBER .)
    NOT_EQ          reduce using rule 93 (constant -> NUMBER .)
    COMMA           reduce using rule 93 (constant -> NUMBER .)
    SEMICOLON       reduce using rule 93 (constant -> NUMBER .)
    RPAREN          reduce using rule 93 (constant -> NUMBER .)
    RBRACE          reduce using rule 93 (constant -> NUMBER .)


state 42

    (13) declaration -> statement_type init_declarator_compound . SEMICOLON
    (8) init_declarator_compound -> init_declarator_compound . COMMA init_declarator

    SEMICOLON       shift and go to state 81
    COMMA           shift and go to state 82


state 43

    (14) declaration -> statement_type SEMICOLON .

    $end            reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    RBRACE          reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    LBRACE          reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    IF              reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    WHILE           reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    FOR             reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    DO              reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    CHAR            reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    INT             reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    TIMES           reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    PLUS            reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    MINUS           reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    IDENTIFIER      reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    LPAREN          reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    NUMBER          reduce using rule 14 (declaration -> statement_type SEMICOLON .)
    SEMICOLON       reduce using rule 14 (declaration -> statement_type SEMICOLON .)


state 44

    (7) init_declarator_compound -> init_declarator .

    SEMICOLON       reduce using rule 7 (init_declarator_compound -> init_declarator .)
    COMMA           reduce using rule 7 (init_declarator_compound -> init_declarator .)


state 45

    (9) init_declarator -> simple_declarator .
    (10) init_declarator -> simple_declarator . ASSIGN initializer
    (19) simple_declarator -> simple_declarator . LPAREN parameter_list RPAREN
    (20) simple_declarator -> simple_declarator . LPAREN identifier_list RPAREN

    SEMICOLON       reduce using rule 9 (init_declarator -> simple_declarator .)
    COMMA           reduce using rule 9 (init_declarator -> simple_declarator .)
    ASSIGN          shift and go to state 83
    LPAREN          shift and go to state 84


state 46

    (17) simple_declarator -> IDENTIFIER .

    ASSIGN          reduce using rule 17 (simple_declarator -> IDENTIFIER .)
    LPAREN          reduce using rule 17 (simple_declarator -> IDENTIFIER .)
    SEMICOLON       reduce using rule 17 (simple_declarator -> IDENTIFIER .)
    COMMA           reduce using rule 17 (simple_declarator -> IDENTIFIER .)
    RPAREN          reduce using rule 17 (simple_declarator -> IDENTIFIER .)


state 47

    (18) simple_declarator -> LPAREN . simple_declarator RPAREN
    (17) simple_declarator -> . IDENTIFIER
    (18) simple_declarator -> . LPAREN simple_declarator RPAREN
    (19) simple_declarator -> . simple_declarator LPAREN parameter_list RPAREN
    (20) simple_declarator -> . simple_declarator LPAREN identifier_list RPAREN

    IDENTIFIER      shift and go to state 46
    LPAREN          shift and go to state 47

    simple_declarator              shift and go to state 85

state 48

    (3) statement_type -> type_specifier statement_type .

    SEMICOLON       reduce using rule 3 (statement_type -> type_specifier statement_type .)
    IDENTIFIER      reduce using rule 3 (statement_type -> type_specifier statement_type .)
    LPAREN          reduce using rule 3 (statement_type -> type_specifier statement_type .)
    RPAREN          reduce using rule 3 (statement_type -> type_specifier statement_type .)
    COMMA           reduce using rule 3 (statement_type -> type_specifier statement_type .)


state 49

    (43) compound_statement -> LBRACE declaration_compound statement_list . RBRACE
    (48) statement_list -> statement_list . statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 86
    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    statement                      shift and go to state 53
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    expression                     shift and go to state 21
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 50

    (45) compound_statement -> LBRACE declaration_compound RBRACE .

    $end            reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    RBRACE          reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    LBRACE          reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    IF              reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    WHILE           reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    FOR             reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    DO              reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    TIMES           reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    PLUS            reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    MINUS           reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    IDENTIFIER      reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    LPAREN          reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    NUMBER          reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    SEMICOLON       reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)
    ELSE            reduce using rule 45 (compound_statement -> LBRACE declaration_compound RBRACE .)


state 51

    (16) declaration_compound -> declaration_compound declaration .

    RBRACE          reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    LBRACE          reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    IF              reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    WHILE           reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    FOR             reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    DO              reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    CHAR            reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    INT             reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    TIMES           reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    PLUS            reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    MINUS           reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    IDENTIFIER      reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    LPAREN          reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    NUMBER          reduce using rule 16 (declaration_compound -> declaration_compound declaration .)
    SEMICOLON       reduce using rule 16 (declaration_compound -> declaration_compound declaration .)


state 52

    (44) compound_statement -> LBRACE statement_list RBRACE .

    $end            reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    RBRACE          reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    LBRACE          reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    IF              reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    WHILE           reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    FOR             reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    DO              reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    TIMES           reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    PLUS            reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    MINUS           reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    IDENTIFIER      reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    LPAREN          reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    NUMBER          reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    SEMICOLON       reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)
    ELSE            reduce using rule 44 (compound_statement -> LBRACE statement_list RBRACE .)


state 53

    (48) statement_list -> statement_list statement .

    RBRACE          reduce using rule 48 (statement_list -> statement_list statement .)
    LBRACE          reduce using rule 48 (statement_list -> statement_list statement .)
    IF              reduce using rule 48 (statement_list -> statement_list statement .)
    WHILE           reduce using rule 48 (statement_list -> statement_list statement .)
    FOR             reduce using rule 48 (statement_list -> statement_list statement .)
    DO              reduce using rule 48 (statement_list -> statement_list statement .)
    TIMES           reduce using rule 48 (statement_list -> statement_list statement .)
    PLUS            reduce using rule 48 (statement_list -> statement_list statement .)
    MINUS           reduce using rule 48 (statement_list -> statement_list statement .)
    IDENTIFIER      reduce using rule 48 (statement_list -> statement_list statement .)
    LPAREN          reduce using rule 48 (statement_list -> statement_list statement .)
    NUMBER          reduce using rule 48 (statement_list -> statement_list statement .)
    SEMICOLON       reduce using rule 48 (statement_list -> statement_list statement .)


state 54

    (42) expression_statement -> expression_type SEMICOLON .

    RBRACE          reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    LBRACE          reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    IF              reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    WHILE           reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    FOR             reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    DO              reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    TIMES           reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    PLUS            reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    MINUS           reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    IDENTIFIER      reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    LPAREN          reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    NUMBER          reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    SEMICOLON       reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)
    ELSE            reduce using rule 42 (expression_statement -> expression_type SEMICOLON .)


state 55

    (51) if_statement -> IF LPAREN . expression RPAREN statement
    (52) if_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 87
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 56

    (90) primary_expression -> LPAREN expression . RPAREN
    (59) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 88
    COMMA           shift and go to state 60


state 57

    (76) cast_expression -> LPAREN type_name . RPAREN cast_expression

    RPAREN          shift and go to state 89


state 58

    (32) type_name -> multi_specifier . declarator_type
    (33) declarator_type -> . empty
    (34) declarator_type -> . direct_single_declarator
    (94) empty -> .
    (35) direct_single_declarator -> . LPAREN direct_single_declarator RPAREN
    (36) direct_single_declarator -> . direct_single_declarator LPAREN parameter_type_list RPAREN
    (37) direct_single_declarator -> . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 94 (empty -> .)
    LPAREN          shift and go to state 93

    declarator_type                shift and go to state 90
    empty                          shift and go to state 91
    direct_single_declarator       shift and go to state 92

state 59

    (11) multi_specifier -> type_specifier . multi_specifier
    (12) multi_specifier -> type_specifier .
    (11) multi_specifier -> . type_specifier multi_specifier
    (12) multi_specifier -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    LPAREN          reduce using rule 12 (multi_specifier -> type_specifier .)
    RPAREN          reduce using rule 12 (multi_specifier -> type_specifier .)
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    type_specifier                 shift and go to state 59
    multi_specifier                shift and go to state 94

state 60

    (59) expression -> expression COMMA . assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    assignment_expression          shift and go to state 95
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 61

    (53) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 96
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 62

    (54) iteration_statement -> FOR LPAREN . expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression_type                shift and go to state 97
    empty                          shift and go to state 25
    expression                     shift and go to state 21
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 63

    (55) iteration_statement -> DO statement . WHILE LPAREN expression RPAREN SEMICOLON

    WHILE           shift and go to state 98


state 64

    (65) equality_expression -> equality_expression EQ . relational_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    relational_expression          shift and go to state 99
    next_expression                shift and go to state 33
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 65

    (66) equality_expression -> equality_expression NOT_EQ . relational_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    relational_expression          shift and go to state 100
    next_expression                shift and go to state 33
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 66

    (61) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    unary_expression               shift and go to state 28
    assignment_expression          shift and go to state 101
    equality_expression            shift and go to state 27
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 67

    (62) assignment_operator -> ASSIGN .

    TIMES           reduce using rule 62 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 62 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 62 (assignment_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 62 (assignment_operator -> ASSIGN .)
    LPAREN          reduce using rule 62 (assignment_operator -> ASSIGN .)
    NUMBER          reduce using rule 62 (assignment_operator -> ASSIGN .)


state 68

    (63) assignment_operator -> PLUSASSIGN .

    TIMES           reduce using rule 63 (assignment_operator -> PLUSASSIGN .)
    PLUS            reduce using rule 63 (assignment_operator -> PLUSASSIGN .)
    MINUS           reduce using rule 63 (assignment_operator -> PLUSASSIGN .)
    IDENTIFIER      reduce using rule 63 (assignment_operator -> PLUSASSIGN .)
    LPAREN          reduce using rule 63 (assignment_operator -> PLUSASSIGN .)
    NUMBER          reduce using rule 63 (assignment_operator -> PLUSASSIGN .)


state 69

    (68) relational_expression -> relational_expression LT . next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    next_expression                shift and go to state 102
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 70

    (69) relational_expression -> relational_expression GT . next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    next_expression                shift and go to state 103
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 71

    (70) relational_expression -> relational_expression LE . next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    next_expression                shift and go to state 104
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 72

    (71) relational_expression -> relational_expression GE . next_expression
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    next_expression                shift and go to state 105
    multiplicative_expression      shift and go to state 38
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 73

    (86) higher_expression -> higher_expression LPAREN . argument_expression_list RPAREN
    (87) higher_expression -> higher_expression LPAREN . RPAREN
    (91) argument_expression_list -> . assignment_expression
    (92) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          shift and go to state 107
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    higher_expression              shift and go to state 30
    argument_expression_list       shift and go to state 106
    assignment_expression          shift and go to state 108
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 74

    (81) unary_expression -> unary_operator cast_expression .

    ASSIGN          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    PLUSASSIGN      reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    TIMES           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    GT              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    GE              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    NOT_EQ          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    SEMICOLON       reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 81 (unary_expression -> unary_operator cast_expression .)


state 75

    (75) cast_expression -> unary_expression .

    ASSIGN          reduce using rule 75 (cast_expression -> unary_expression .)
    PLUSASSIGN      reduce using rule 75 (cast_expression -> unary_expression .)
    TIMES           reduce using rule 75 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 75 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 75 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 75 (cast_expression -> unary_expression .)
    LT              reduce using rule 75 (cast_expression -> unary_expression .)
    GT              reduce using rule 75 (cast_expression -> unary_expression .)
    LE              reduce using rule 75 (cast_expression -> unary_expression .)
    GE              reduce using rule 75 (cast_expression -> unary_expression .)
    EQ              reduce using rule 75 (cast_expression -> unary_expression .)
    NOT_EQ          reduce using rule 75 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 75 (cast_expression -> unary_expression .)
    SEMICOLON       reduce using rule 75 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 75 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 75 (cast_expression -> unary_expression .)


state 76

    (76) cast_expression -> LPAREN . type_name RPAREN cast_expression
    (90) primary_expression -> LPAREN . expression RPAREN
    (32) type_name -> . multi_specifier declarator_type
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (11) multi_specifier -> . type_specifier multi_specifier
    (12) multi_specifier -> . type_specifier
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    CHAR            shift and go to state 7
    INT             shift and go to state 8
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    type_name                      shift and go to state 57
    cast_expression                shift and go to state 32
    expression                     shift and go to state 56
    multi_specifier                shift and go to state 58
    assignment_expression          shift and go to state 26
    type_specifier                 shift and go to state 59
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 77

    (78) next_expression -> next_expression PLUS . multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 78

    (79) next_expression -> next_expression MINUS . multiplicative_expression
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    multiplicative_expression      shift and go to state 110
    cast_expression                shift and go to state 32
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 79

    (73) multiplicative_expression -> multiplicative_expression TIMES . cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    cast_expression                shift and go to state 111
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 80

    (74) multiplicative_expression -> multiplicative_expression DIVIDE . cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    cast_expression                shift and go to state 112
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 81

    (13) declaration -> statement_type init_declarator_compound SEMICOLON .

    $end            reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    RBRACE          reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    LBRACE          reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    IF              reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    WHILE           reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    FOR             reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    DO              reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    CHAR            reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    INT             reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    TIMES           reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    PLUS            reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    MINUS           reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    IDENTIFIER      reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    LPAREN          reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    NUMBER          reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)
    SEMICOLON       reduce using rule 13 (declaration -> statement_type init_declarator_compound SEMICOLON .)


state 82

    (8) init_declarator_compound -> init_declarator_compound COMMA . init_declarator
    (9) init_declarator -> . simple_declarator
    (10) init_declarator -> . simple_declarator ASSIGN initializer
    (17) simple_declarator -> . IDENTIFIER
    (18) simple_declarator -> . LPAREN simple_declarator RPAREN
    (19) simple_declarator -> . simple_declarator LPAREN parameter_list RPAREN
    (20) simple_declarator -> . simple_declarator LPAREN identifier_list RPAREN

    IDENTIFIER      shift and go to state 46
    LPAREN          shift and go to state 47

    init_declarator                shift and go to state 113
    simple_declarator              shift and go to state 45

state 83

    (10) init_declarator -> simple_declarator ASSIGN . initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 116
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    initializer                    shift and go to state 114
    assignment_expression          shift and go to state 115
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 84

    (19) simple_declarator -> simple_declarator LPAREN . parameter_list RPAREN
    (20) simple_declarator -> simple_declarator LPAREN . identifier_list RPAREN
    (21) parameter_list -> . parameter_declaration
    (22) parameter_list -> . parameter_list COMMA parameter_declaration
    (25) identifier_list -> . IDENTIFIER
    (26) identifier_list -> . identifier_list COMMA IDENTIFIER
    (23) parameter_declaration -> . statement_type simple_declarator
    (24) parameter_declaration -> . statement_type declarator_type
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    IDENTIFIER      shift and go to state 120
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    parameter_list                 shift and go to state 117
    identifier_list                shift and go to state 118
    parameter_declaration          shift and go to state 119
    statement_type                 shift and go to state 121
    type_specifier                 shift and go to state 6

state 85

    (18) simple_declarator -> LPAREN simple_declarator . RPAREN
    (19) simple_declarator -> simple_declarator . LPAREN parameter_list RPAREN
    (20) simple_declarator -> simple_declarator . LPAREN identifier_list RPAREN

    RPAREN          shift and go to state 122
    LPAREN          shift and go to state 84


state 86

    (43) compound_statement -> LBRACE declaration_compound statement_list RBRACE .

    $end            reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    RBRACE          reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    LBRACE          reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    IF              reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    WHILE           reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    FOR             reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    DO              reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    TIMES           reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    PLUS            reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    MINUS           reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    IDENTIFIER      reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    LPAREN          reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    NUMBER          reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    SEMICOLON       reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)
    ELSE            reduce using rule 43 (compound_statement -> LBRACE declaration_compound statement_list RBRACE .)


state 87

    (51) if_statement -> IF LPAREN expression . RPAREN statement
    (52) if_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (59) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 123
    COMMA           shift and go to state 60


state 88

    (90) primary_expression -> LPAREN expression RPAREN .

    LPAREN          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    PLUSASSIGN      reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    GT              reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    GE              reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    NOT_EQ          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    SEMICOLON       reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 90 (primary_expression -> LPAREN expression RPAREN .)


state 89

    (76) cast_expression -> LPAREN type_name RPAREN . cast_expression
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (93) constant -> . NUMBER

    LPAREN          shift and go to state 76
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    NUMBER          shift and go to state 41

    cast_expression                shift and go to state 124
    unary_expression               shift and go to state 75
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    primary_expression             shift and go to state 34
    constant                       shift and go to state 40

state 90

    (32) type_name -> multi_specifier declarator_type .

    RPAREN          reduce using rule 32 (type_name -> multi_specifier declarator_type .)


state 91

    (33) declarator_type -> empty .

    RPAREN          reduce using rule 33 (declarator_type -> empty .)
    COMMA           reduce using rule 33 (declarator_type -> empty .)


state 92

    (34) declarator_type -> direct_single_declarator .
    (36) direct_single_declarator -> direct_single_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          reduce using rule 34 (declarator_type -> direct_single_declarator .)
    COMMA           reduce using rule 34 (declarator_type -> direct_single_declarator .)
    LPAREN          shift and go to state 125


state 93

    (35) direct_single_declarator -> LPAREN . direct_single_declarator RPAREN
    (37) direct_single_declarator -> LPAREN . parameter_type_list RPAREN
    (35) direct_single_declarator -> . LPAREN direct_single_declarator RPAREN
    (36) direct_single_declarator -> . direct_single_declarator LPAREN parameter_type_list RPAREN
    (37) direct_single_declarator -> . LPAREN parameter_type_list RPAREN
    (49) parameter_type_list -> . empty
    (50) parameter_type_list -> . parameter_list
    (94) empty -> .
    (21) parameter_list -> . parameter_declaration
    (22) parameter_list -> . parameter_list COMMA parameter_declaration
    (23) parameter_declaration -> . statement_type simple_declarator
    (24) parameter_declaration -> . statement_type declarator_type
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    LPAREN          shift and go to state 93
    RPAREN          reduce using rule 94 (empty -> .)
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    direct_single_declarator       shift and go to state 126
    parameter_type_list            shift and go to state 127
    empty                          shift and go to state 128
    parameter_list                 shift and go to state 129
    parameter_declaration          shift and go to state 119
    statement_type                 shift and go to state 121
    type_specifier                 shift and go to state 6

state 94

    (11) multi_specifier -> type_specifier multi_specifier .

    LPAREN          reduce using rule 11 (multi_specifier -> type_specifier multi_specifier .)
    RPAREN          reduce using rule 11 (multi_specifier -> type_specifier multi_specifier .)


state 95

    (59) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 59 (expression -> expression COMMA assignment_expression .)
    SEMICOLON       reduce using rule 59 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 59 (expression -> expression COMMA assignment_expression .)


state 96

    (53) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (59) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 130
    COMMA           shift and go to state 60


state 97

    (54) iteration_statement -> FOR LPAREN expression_type . SEMICOLON expression_type SEMICOLON expression_type RPAREN statement

    SEMICOLON       shift and go to state 131


state 98

    (55) iteration_statement -> DO statement WHILE . LPAREN expression RPAREN SEMICOLON

    LPAREN          shift and go to state 132


state 99

    (65) equality_expression -> equality_expression EQ relational_expression .
    (68) relational_expression -> relational_expression . LT next_expression
    (69) relational_expression -> relational_expression . GT next_expression
    (70) relational_expression -> relational_expression . LE next_expression
    (71) relational_expression -> relational_expression . GE next_expression

    EQ              reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    NOT_EQ          reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    COMMA           reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    SEMICOLON       reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    RPAREN          reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    RBRACE          reduce using rule 65 (equality_expression -> equality_expression EQ relational_expression .)
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72


state 100

    (66) equality_expression -> equality_expression NOT_EQ relational_expression .
    (68) relational_expression -> relational_expression . LT next_expression
    (69) relational_expression -> relational_expression . GT next_expression
    (70) relational_expression -> relational_expression . LE next_expression
    (71) relational_expression -> relational_expression . GE next_expression

    EQ              reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    SEMICOLON       reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RPAREN          reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RBRACE          reduce using rule 66 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LT              shift and go to state 69
    GT              shift and go to state 70
    LE              shift and go to state 71
    GE              shift and go to state 72


state 101

    (61) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 61 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 102

    (68) relational_expression -> relational_expression LT next_expression .
    (78) next_expression -> next_expression . PLUS multiplicative_expression
    (79) next_expression -> next_expression . MINUS multiplicative_expression

    LT              reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    GT              reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    LE              reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    GE              reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    EQ              reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    NOT_EQ          reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    COMMA           reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    SEMICOLON       reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    RPAREN          reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    RBRACE          reduce using rule 68 (relational_expression -> relational_expression LT next_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78


state 103

    (69) relational_expression -> relational_expression GT next_expression .
    (78) next_expression -> next_expression . PLUS multiplicative_expression
    (79) next_expression -> next_expression . MINUS multiplicative_expression

    LT              reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    GT              reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    LE              reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    GE              reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    EQ              reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    NOT_EQ          reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    COMMA           reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    SEMICOLON       reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    RPAREN          reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    RBRACE          reduce using rule 69 (relational_expression -> relational_expression GT next_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78


state 104

    (70) relational_expression -> relational_expression LE next_expression .
    (78) next_expression -> next_expression . PLUS multiplicative_expression
    (79) next_expression -> next_expression . MINUS multiplicative_expression

    LT              reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    GT              reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    LE              reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    GE              reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    EQ              reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    NOT_EQ          reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    COMMA           reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    SEMICOLON       reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    RPAREN          reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    RBRACE          reduce using rule 70 (relational_expression -> relational_expression LE next_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78


state 105

    (71) relational_expression -> relational_expression GE next_expression .
    (78) next_expression -> next_expression . PLUS multiplicative_expression
    (79) next_expression -> next_expression . MINUS multiplicative_expression

    LT              reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    GT              reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    LE              reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    GE              reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    EQ              reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    NOT_EQ          reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    COMMA           reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    SEMICOLON       reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    RPAREN          reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    RBRACE          reduce using rule 71 (relational_expression -> relational_expression GE next_expression .)
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78


state 106

    (86) higher_expression -> higher_expression LPAREN argument_expression_list . RPAREN
    (92) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 133
    COMMA           shift and go to state 134


state 107

    (87) higher_expression -> higher_expression LPAREN RPAREN .

    LPAREN          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    ASSIGN          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    PLUSASSIGN      reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    TIMES           reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    DIVIDE          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    PLUS            reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    MINUS           reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    LT              reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    GT              reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    LE              reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    GE              reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    EQ              reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    NOT_EQ          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    COMMA           reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    SEMICOLON       reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    RPAREN          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)
    RBRACE          reduce using rule 87 (higher_expression -> higher_expression LPAREN RPAREN .)


state 108

    (91) argument_expression_list -> assignment_expression .

    RPAREN          reduce using rule 91 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 91 (argument_expression_list -> assignment_expression .)


state 109

    (78) next_expression -> next_expression PLUS multiplicative_expression .
    (73) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (74) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression

    PLUS            reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    LT              reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    GT              reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    LE              reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    GE              reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    EQ              reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    NOT_EQ          reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    RPAREN          reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    RBRACE          reduce using rule 78 (next_expression -> next_expression PLUS multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80


state 110

    (79) next_expression -> next_expression MINUS multiplicative_expression .
    (73) multiplicative_expression -> multiplicative_expression . TIMES cast_expression
    (74) multiplicative_expression -> multiplicative_expression . DIVIDE cast_expression

    PLUS            reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    LT              reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    GT              reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    LE              reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    GE              reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    EQ              reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    NOT_EQ          reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    RPAREN          reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    RBRACE          reduce using rule 79 (next_expression -> next_expression MINUS multiplicative_expression .)
    TIMES           shift and go to state 79
    DIVIDE          shift and go to state 80


state 111

    (73) multiplicative_expression -> multiplicative_expression TIMES cast_expression .

    TIMES           reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    DIVIDE          reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    PLUS            reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    MINUS           reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LT              reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GT              reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    LE              reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    GE              reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    EQ              reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    NOT_EQ          reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    COMMA           reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    SEMICOLON       reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RPAREN          reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)
    RBRACE          reduce using rule 73 (multiplicative_expression -> multiplicative_expression TIMES cast_expression .)


state 112

    (74) multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .

    TIMES           reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    DIVIDE          reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    PLUS            reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    MINUS           reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LT              reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GT              reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    LE              reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    GE              reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    EQ              reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    NOT_EQ          reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    COMMA           reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    SEMICOLON       reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RPAREN          reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)
    RBRACE          reduce using rule 74 (multiplicative_expression -> multiplicative_expression DIVIDE cast_expression .)


state 113

    (8) init_declarator_compound -> init_declarator_compound COMMA init_declarator .

    SEMICOLON       reduce using rule 8 (init_declarator_compound -> init_declarator_compound COMMA init_declarator .)
    COMMA           reduce using rule 8 (init_declarator_compound -> init_declarator_compound COMMA init_declarator .)


state 114

    (10) init_declarator -> simple_declarator ASSIGN initializer .

    SEMICOLON       reduce using rule 10 (init_declarator -> simple_declarator ASSIGN initializer .)
    COMMA           reduce using rule 10 (init_declarator -> simple_declarator ASSIGN initializer .)


state 115

    (27) initializer -> assignment_expression .

    SEMICOLON       reduce using rule 27 (initializer -> assignment_expression .)
    COMMA           reduce using rule 27 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 27 (initializer -> assignment_expression .)


state 116

    (28) initializer -> LBRACE . initializer_list RBRACE
    (29) initializer -> LBRACE . initializer_list COMMA RBRACE
    (30) initializer_list -> . initializer
    (31) initializer_list -> . initializer_list COMMA initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 116
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    initializer_list               shift and go to state 135
    initializer                    shift and go to state 136
    assignment_expression          shift and go to state 115
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 117

    (19) simple_declarator -> simple_declarator LPAREN parameter_list . RPAREN
    (22) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 137
    COMMA           shift and go to state 138


state 118

    (20) simple_declarator -> simple_declarator LPAREN identifier_list . RPAREN
    (26) identifier_list -> identifier_list . COMMA IDENTIFIER

    RPAREN          shift and go to state 139
    COMMA           shift and go to state 140


state 119

    (21) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 21 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 21 (parameter_list -> parameter_declaration .)


state 120

    (25) identifier_list -> IDENTIFIER .

    RPAREN          reduce using rule 25 (identifier_list -> IDENTIFIER .)
    COMMA           reduce using rule 25 (identifier_list -> IDENTIFIER .)


state 121

    (23) parameter_declaration -> statement_type . simple_declarator
    (24) parameter_declaration -> statement_type . declarator_type
    (17) simple_declarator -> . IDENTIFIER
    (18) simple_declarator -> . LPAREN simple_declarator RPAREN
    (19) simple_declarator -> . simple_declarator LPAREN parameter_list RPAREN
    (20) simple_declarator -> . simple_declarator LPAREN identifier_list RPAREN
    (33) declarator_type -> . empty
    (34) declarator_type -> . direct_single_declarator
    (94) empty -> .
    (35) direct_single_declarator -> . LPAREN direct_single_declarator RPAREN
    (36) direct_single_declarator -> . direct_single_declarator LPAREN parameter_type_list RPAREN
    (37) direct_single_declarator -> . LPAREN parameter_type_list RPAREN

    IDENTIFIER      shift and go to state 46
    LPAREN          shift and go to state 143
    RPAREN          reduce using rule 94 (empty -> .)
    COMMA           reduce using rule 94 (empty -> .)

    simple_declarator              shift and go to state 141
    declarator_type                shift and go to state 142
    empty                          shift and go to state 91
    direct_single_declarator       shift and go to state 92

state 122

    (18) simple_declarator -> LPAREN simple_declarator RPAREN .

    ASSIGN          reduce using rule 18 (simple_declarator -> LPAREN simple_declarator RPAREN .)
    LPAREN          reduce using rule 18 (simple_declarator -> LPAREN simple_declarator RPAREN .)
    SEMICOLON       reduce using rule 18 (simple_declarator -> LPAREN simple_declarator RPAREN .)
    COMMA           reduce using rule 18 (simple_declarator -> LPAREN simple_declarator RPAREN .)
    RPAREN          reduce using rule 18 (simple_declarator -> LPAREN simple_declarator RPAREN .)


state 123

    (51) if_statement -> IF LPAREN expression RPAREN . statement
    (52) if_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 21
    statement                      shift and go to state 144
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 124

    (76) cast_expression -> LPAREN type_name RPAREN cast_expression .

    TIMES           reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    DIVIDE          reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUS            reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    MINUS           reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LT              reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GT              reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    LE              reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    GE              reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    EQ              reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    NOT_EQ          reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    COMMA           reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    SEMICOLON       reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RPAREN          reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    ASSIGN          reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    PLUSASSIGN      reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)
    RBRACE          reduce using rule 76 (cast_expression -> LPAREN type_name RPAREN cast_expression .)


state 125

    (36) direct_single_declarator -> direct_single_declarator LPAREN . parameter_type_list RPAREN
    (49) parameter_type_list -> . empty
    (50) parameter_type_list -> . parameter_list
    (94) empty -> .
    (21) parameter_list -> . parameter_declaration
    (22) parameter_list -> . parameter_list COMMA parameter_declaration
    (23) parameter_declaration -> . statement_type simple_declarator
    (24) parameter_declaration -> . statement_type declarator_type
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    RPAREN          reduce using rule 94 (empty -> .)
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    parameter_type_list            shift and go to state 145
    empty                          shift and go to state 128
    parameter_list                 shift and go to state 129
    parameter_declaration          shift and go to state 119
    statement_type                 shift and go to state 121
    type_specifier                 shift and go to state 6

state 126

    (35) direct_single_declarator -> LPAREN direct_single_declarator . RPAREN
    (36) direct_single_declarator -> direct_single_declarator . LPAREN parameter_type_list RPAREN

    RPAREN          shift and go to state 146
    LPAREN          shift and go to state 125


state 127

    (37) direct_single_declarator -> LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 147


state 128

    (49) parameter_type_list -> empty .

    RPAREN          reduce using rule 49 (parameter_type_list -> empty .)


state 129

    (50) parameter_type_list -> parameter_list .
    (22) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          reduce using rule 50 (parameter_type_list -> parameter_list .)
    COMMA           shift and go to state 138


state 130

    (53) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 21
    statement                      shift and go to state 148
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 131

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON . expression_type SEMICOLON expression_type RPAREN statement
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression_type                shift and go to state 149
    empty                          shift and go to state 25
    expression                     shift and go to state 21
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 132

    (55) iteration_statement -> DO statement WHILE LPAREN . expression RPAREN SEMICOLON
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 150
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 133

    (86) higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .

    LPAREN          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    ASSIGN          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    PLUSASSIGN      reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    TIMES           reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    DIVIDE          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    PLUS            reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    MINUS           reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    LT              reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    GT              reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    LE              reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    GE              reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    EQ              reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    NOT_EQ          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    COMMA           reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    SEMICOLON       reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    RPAREN          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)
    RBRACE          reduce using rule 86 (higher_expression -> higher_expression LPAREN argument_expression_list RPAREN .)


state 134

    (92) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    assignment_expression          shift and go to state 151
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 135

    (28) initializer -> LBRACE initializer_list . RBRACE
    (29) initializer -> LBRACE initializer_list . COMMA RBRACE
    (31) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 152
    COMMA           shift and go to state 153


state 136

    (30) initializer_list -> initializer .

    RBRACE          reduce using rule 30 (initializer_list -> initializer .)
    COMMA           reduce using rule 30 (initializer_list -> initializer .)


state 137

    (19) simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .

    ASSIGN          reduce using rule 19 (simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .)
    LPAREN          reduce using rule 19 (simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .)
    SEMICOLON       reduce using rule 19 (simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 19 (simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 19 (simple_declarator -> simple_declarator LPAREN parameter_list RPAREN .)


state 138

    (22) parameter_list -> parameter_list COMMA . parameter_declaration
    (23) parameter_declaration -> . statement_type simple_declarator
    (24) parameter_declaration -> . statement_type declarator_type
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    CHAR            shift and go to state 7
    INT             shift and go to state 8

    parameter_declaration          shift and go to state 154
    statement_type                 shift and go to state 121
    type_specifier                 shift and go to state 6

state 139

    (20) simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .

    ASSIGN          reduce using rule 20 (simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .)
    LPAREN          reduce using rule 20 (simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .)
    SEMICOLON       reduce using rule 20 (simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .)
    COMMA           reduce using rule 20 (simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .)
    RPAREN          reduce using rule 20 (simple_declarator -> simple_declarator LPAREN identifier_list RPAREN .)


state 140

    (26) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 155


state 141

    (23) parameter_declaration -> statement_type simple_declarator .
    (19) simple_declarator -> simple_declarator . LPAREN parameter_list RPAREN
    (20) simple_declarator -> simple_declarator . LPAREN identifier_list RPAREN

    RPAREN          reduce using rule 23 (parameter_declaration -> statement_type simple_declarator .)
    COMMA           reduce using rule 23 (parameter_declaration -> statement_type simple_declarator .)
    LPAREN          shift and go to state 84


state 142

    (24) parameter_declaration -> statement_type declarator_type .

    RPAREN          reduce using rule 24 (parameter_declaration -> statement_type declarator_type .)
    COMMA           reduce using rule 24 (parameter_declaration -> statement_type declarator_type .)


state 143

    (18) simple_declarator -> LPAREN . simple_declarator RPAREN
    (35) direct_single_declarator -> LPAREN . direct_single_declarator RPAREN
    (37) direct_single_declarator -> LPAREN . parameter_type_list RPAREN
    (17) simple_declarator -> . IDENTIFIER
    (18) simple_declarator -> . LPAREN simple_declarator RPAREN
    (19) simple_declarator -> . simple_declarator LPAREN parameter_list RPAREN
    (20) simple_declarator -> . simple_declarator LPAREN identifier_list RPAREN
    (35) direct_single_declarator -> . LPAREN direct_single_declarator RPAREN
    (36) direct_single_declarator -> . direct_single_declarator LPAREN parameter_type_list RPAREN
    (37) direct_single_declarator -> . LPAREN parameter_type_list RPAREN
    (49) parameter_type_list -> . empty
    (50) parameter_type_list -> . parameter_list
    (94) empty -> .
    (21) parameter_list -> . parameter_declaration
    (22) parameter_list -> . parameter_list COMMA parameter_declaration
    (23) parameter_declaration -> . statement_type simple_declarator
    (24) parameter_declaration -> . statement_type declarator_type
    (3) statement_type -> . type_specifier statement_type
    (4) statement_type -> . type_specifier
    (5) type_specifier -> . CHAR
    (6) type_specifier -> . INT

    IDENTIFIER      shift and go to state 46
    LPAREN          shift and go to state 143
    RPAREN          reduce using rule 94 (empty -> .)
    CHAR            shift and go to state 7
    INT             shift and go to state 8

    simple_declarator              shift and go to state 85
    direct_single_declarator       shift and go to state 126
    parameter_type_list            shift and go to state 127
    parameter_list                 shift and go to state 129
    empty                          shift and go to state 128
    parameter_declaration          shift and go to state 119
    statement_type                 shift and go to state 121
    type_specifier                 shift and go to state 6

state 144

    (51) if_statement -> IF LPAREN expression RPAREN statement .
    (52) if_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    RBRACE          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    IF              reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    DO              reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 156

  ! ELSE            [ reduce using rule 51 (if_statement -> IF LPAREN expression RPAREN statement .) ]


state 145

    (36) direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list . RPAREN

    RPAREN          shift and go to state 157


state 146

    (35) direct_single_declarator -> LPAREN direct_single_declarator RPAREN .

    LPAREN          reduce using rule 35 (direct_single_declarator -> LPAREN direct_single_declarator RPAREN .)
    RPAREN          reduce using rule 35 (direct_single_declarator -> LPAREN direct_single_declarator RPAREN .)
    COMMA           reduce using rule 35 (direct_single_declarator -> LPAREN direct_single_declarator RPAREN .)


state 147

    (37) direct_single_declarator -> LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 37 (direct_single_declarator -> LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 37 (direct_single_declarator -> LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 37 (direct_single_declarator -> LPAREN parameter_type_list RPAREN .)


state 148

    (53) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    RBRACE          reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IF              reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    DO              reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    IDENTIFIER      reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NUMBER          reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMICOLON       reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 53 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 149

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type . SEMICOLON expression_type RPAREN statement

    SEMICOLON       shift and go to state 158


state 150

    (55) iteration_statement -> DO statement WHILE LPAREN expression . RPAREN SEMICOLON
    (59) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 159
    COMMA           shift and go to state 60


state 151

    (92) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RPAREN          reduce using rule 92 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 92 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 152

    (28) initializer -> LBRACE initializer_list RBRACE .

    SEMICOLON       reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)
    COMMA           reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 28 (initializer -> LBRACE initializer_list RBRACE .)


state 153

    (29) initializer -> LBRACE initializer_list COMMA . RBRACE
    (31) initializer_list -> initializer_list COMMA . initializer
    (27) initializer -> . assignment_expression
    (28) initializer -> . LBRACE initializer_list RBRACE
    (29) initializer -> . LBRACE initializer_list COMMA RBRACE
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RBRACE          shift and go to state 160
    LBRACE          shift and go to state 116
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    initializer                    shift and go to state 161
    assignment_expression          shift and go to state 115
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 154

    (22) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 22 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 22 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 155

    (26) identifier_list -> identifier_list COMMA IDENTIFIER .

    RPAREN          reduce using rule 26 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    COMMA           reduce using rule 26 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 156

    (52) if_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression                     shift and go to state 21
    statement                      shift and go to state 162
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression_type                shift and go to state 18
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 157

    (36) direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN .

    LPAREN          reduce using rule 36 (direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN .)
    RPAREN          reduce using rule 36 (direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN .)
    COMMA           reduce using rule 36 (direct_single_declarator -> direct_single_declarator LPAREN parameter_type_list RPAREN .)


state 158

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON . expression_type RPAREN statement
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    RPAREN          reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression_type                shift and go to state 163
    empty                          shift and go to state 25
    expression                     shift and go to state 21
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 159

    (55) iteration_statement -> DO statement WHILE LPAREN expression RPAREN . SEMICOLON

    SEMICOLON       shift and go to state 164


state 160

    (29) initializer -> LBRACE initializer_list COMMA RBRACE .

    SEMICOLON       reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    COMMA           reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 29 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 161

    (31) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 31 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 31 (initializer_list -> initializer_list COMMA initializer .)


state 162

    (52) if_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    RBRACE          reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IF              reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    DO              reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    IDENTIFIER      reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NUMBER          reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMICOLON       reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 52 (if_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 163

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type . RPAREN statement

    RPAREN          shift and go to state 165


state 164

    (55) iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .

    RBRACE          reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LBRACE          reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IF              reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    WHILE           reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    FOR             reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    DO              reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    TIMES           reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    PLUS            reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    MINUS           reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    IDENTIFIER      reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    LPAREN          reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    NUMBER          reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    SEMICOLON       reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)
    ELSE            reduce using rule 55 (iteration_statement -> DO statement WHILE LPAREN expression RPAREN SEMICOLON .)


state 165

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN . statement
    (38) statement -> . expression_statement
    (39) statement -> . compound_statement
    (40) statement -> . if_statement
    (41) statement -> . iteration_statement
    (42) expression_statement -> . expression_type SEMICOLON
    (43) compound_statement -> . LBRACE declaration_compound statement_list RBRACE
    (44) compound_statement -> . LBRACE statement_list RBRACE
    (45) compound_statement -> . LBRACE declaration_compound RBRACE
    (46) compound_statement -> . LBRACE RBRACE
    (51) if_statement -> . IF LPAREN expression RPAREN statement
    (52) if_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (53) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (54) iteration_statement -> . FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement
    (55) iteration_statement -> . DO statement WHILE LPAREN expression RPAREN SEMICOLON
    (56) expression_type -> . empty
    (57) expression_type -> . expression
    (94) empty -> .
    (58) expression -> . assignment_expression
    (59) expression -> . expression COMMA assignment_expression
    (60) assignment_expression -> . equality_expression
    (61) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (64) equality_expression -> . relational_expression
    (65) equality_expression -> . equality_expression EQ relational_expression
    (66) equality_expression -> . equality_expression NOT_EQ relational_expression
    (80) unary_expression -> . higher_expression
    (81) unary_expression -> . unary_operator cast_expression
    (67) relational_expression -> . next_expression
    (68) relational_expression -> . relational_expression LT next_expression
    (69) relational_expression -> . relational_expression GT next_expression
    (70) relational_expression -> . relational_expression LE next_expression
    (71) relational_expression -> . relational_expression GE next_expression
    (85) higher_expression -> . primary_expression
    (86) higher_expression -> . higher_expression LPAREN argument_expression_list RPAREN
    (87) higher_expression -> . higher_expression LPAREN RPAREN
    (82) unary_operator -> . TIMES
    (83) unary_operator -> . PLUS
    (84) unary_operator -> . MINUS
    (77) next_expression -> . multiplicative_expression
    (78) next_expression -> . next_expression PLUS multiplicative_expression
    (79) next_expression -> . next_expression MINUS multiplicative_expression
    (88) primary_expression -> . IDENTIFIER
    (89) primary_expression -> . constant
    (90) primary_expression -> . LPAREN expression RPAREN
    (72) multiplicative_expression -> . cast_expression
    (73) multiplicative_expression -> . multiplicative_expression TIMES cast_expression
    (74) multiplicative_expression -> . multiplicative_expression DIVIDE cast_expression
    (93) constant -> . NUMBER
    (75) cast_expression -> . unary_expression
    (76) cast_expression -> . LPAREN type_name RPAREN cast_expression

    LBRACE          shift and go to state 4
    IF              shift and go to state 19
    WHILE           shift and go to state 22
    FOR             shift and go to state 23
    DO              shift and go to state 24
    SEMICOLON       reduce using rule 94 (empty -> .)
    TIMES           shift and go to state 35
    PLUS            shift and go to state 36
    MINUS           shift and go to state 37
    IDENTIFIER      shift and go to state 39
    LPAREN          shift and go to state 20
    NUMBER          shift and go to state 41

    expression_type                shift and go to state 18
    statement                      shift and go to state 166
    expression_statement           shift and go to state 14
    compound_statement             shift and go to state 15
    if_statement                   shift and go to state 16
    iteration_statement            shift and go to state 17
    expression                     shift and go to state 21
    empty                          shift and go to state 25
    assignment_expression          shift and go to state 26
    equality_expression            shift and go to state 27
    unary_expression               shift and go to state 28
    relational_expression          shift and go to state 29
    higher_expression              shift and go to state 30
    unary_operator                 shift and go to state 31
    cast_expression                shift and go to state 32
    next_expression                shift and go to state 33
    primary_expression             shift and go to state 34
    multiplicative_expression      shift and go to state 38
    constant                       shift and go to state 40

state 166

    (54) iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .

    RBRACE          reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    LBRACE          reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    IF              reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    WHILE           reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    FOR             reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    DO              reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    TIMES           reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    PLUS            reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    MINUS           reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    IDENTIFIER      reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    LPAREN          reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    NUMBER          reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    SEMICOLON       reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)
    ELSE            reduce using rule 54 (iteration_statement -> FOR LPAREN expression_type SEMICOLON expression_type SEMICOLON expression_type RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 144 resolved as shift
